{"pages":[{"title":"关于 Ray Eldath","text":"Ray Eldath： 会🥁，家里有一套巨扰民的美派斯，经常被投诉，梦想是攒钱买到PAISTE 900 Ride和Byzance HiHat。正在学🎸，练习的时候经常怀疑自己的手指数量。 喜欢外国文学和科幻。初一开始看的SFW，很可惜的是看了这么多年基本都是图书馆借的… 手头有的杂志没有多少，很希望2023年能去成都参加Worldcon…… 对黄金时代科幻和大刘式科幻不大感冒，较喜欢新浪潮科幻；最喜欢的科幻作家是海因莱茵；国内有一些浪漫主义中短篇科幻也很喜欢，比如阿缺的很多作品（如《彼岸花》），《闪耀》还有《七个吻》等。除开科幻最喜欢的作家是阿尔贝·加缪，还比较喜欢黑塞、米兰·昆德拉和毛姆；诗歌基本只看过普希金和辛波斯卡。欢迎安利各种作品。 对音乐了解不多（听得多），比较喜欢 jrock/jpop/acg。最喜欢的乐队是The Coronas，一只都柏林的英伦摇滚乐队。在国内冷门得离谱，几乎首首歌都只有个位数评论，但首首歌我都很喜欢。最近在朋友的推荐下开始听一些国摇，yysy，我们的国摇真是太厉害了！ 稍微看一些动漫，现在基本退宅，喜欢《EVA》和《夏目友人帐》。有一只朋友送的喵咪老师，很开心。 技术菜，在认识的一些技术圈里几乎垫底… 经常自闭。目前很迷茫，正在瞎学东西，期望未来能做大数据方向的工作。GitHub地址见左侧，欢迎互fo。 喜欢旅游，喜欢大城市的气息。大学四年理想是换电脑+富士XT30+在护照过期前去一趟日本，期望能实现。 从小到大成绩都差，不喜欢也不擅长数学物理，一生之敌；努力太晚，吃了很多亏。 欢迎在左侧关注我的Telegram Channel；如果有想交换友链的欢迎留言。爱你们。","link":"/about/index.html"},{"title":"留言板","text":"留下足迹吧！","link":"/messages/index.html"}],"posts":[{"title":"阿尔贝·加缪其人","text":"他在本世纪顶住了历史潮流，独自继承着源远流长的警世文学。他怀着顽强、严格、纯洁、肃穆、热情的人道主义，向当今时代的种种粗俗丑陋发起胜负未卜的宣战。但是反过来，他以自己始终如一的拒绝，在我们的时代，再次重申反对摒弃道德的马基雅维利主义，反对趋炎附势的现实主义，证实道德的存在。 阿尔贝·加缪是蜚声中外的剧作家、文学家和哲学家。因其以荒谬、彻悟和反抗为核心的“荒谬主义” “热情而冷静地阐明了当代向人类良知提出的种种问题” 而获1957年诺贝尔文学奖，获奖时年仅四十四岁。1913年11月7日，加缪出生在阿尔及利亚小镇蒙多维的一个工人家庭，如他自己所述，“赤贫”、“从来是一个无产者”，贫困构成了加缪早年生活的基调；不仅赤贫，失去父亲更使得加缪“孤立无援”，“只能靠一己之力领悟道理，养成独立的人格，成长为一个男子汉”。在这样的环境下，在向他提供无尽财富，沙滩、阳光和大海的贝尔库贫民区，加缪与伙伴们快乐地玩耍、成长、在温热的海水中游泳，在日光之下嬉戏。加缪对那样的时光满怀感激和怀念，这在《第一人》中体现地淋漓尽致：显然，早年的困苦生活并未阻挡这位作家对世界、人类、大地和痛苦的关切，从《鼠疫》中里厄医生和塔鲁初次见面时的长谈，到作品结尾塔鲁那段发人深省的自白，无不表明正是这种困苦，教会这位未来的诺奖得主要善良，要关怀人，要同情人，要有怜悯之心。1924年6月，加缪以一如既往的优异成绩成为家族中第一位有机会就读中学的人；在他的学生生涯中，这位作家与他的小学教师路易·热尔曼从普通的师生关系到忘年交，加缪从未忘记这位指引了他方向、带给了他光明的德高望重的法语特级教师，他共有四部作品、文章献给这位教师，其中包括诺贝尔文学奖答谢词。1937年5月10日，《反与正》出版，标志着加缪正式进入文学界。在加缪不长的文学生涯中，他发表了多部文学、哲学著作和剧本，还在各大进步报刊上声援抵抗组织，并身体力行地承担情报搜集和出版任务，同皮亚、雷诺等抵抗运动战士联系密切。1943年6月，加缪的戏剧《苍蝇》首演，获得极大成功；在首演式上，加缪认识了著名存在主义哲学家萨特，并与之结下友谊，他们经常在咖啡馆讨论政治、哲学和文学，萨特也多次表达对这位“年轻小伙子”的喜爱——直到1951年。1951年10月18日，《反抗者》出版，加缪在该书中提出的新人道主义引发他和萨特长达一年的激烈论战，并以两人的彻底决裂结束。1959年11月，作品《第一人》第一部分初稿完成，他计划在1960年7月完成初稿，并于1961年完成第二稿，或许即是定稿。 但这一切在次年年初戛然而止——1960年1月4日，阿尔贝·加缪乘汽车回巴黎时车祸身亡，享年四十六岁。他的离世给法国知识界带来极大震动，一时间悼念文章铺天盖地。在这些悼念文字中，尤以加缪的前论敌——或许还能称为“前”“前挚友”——萨特的悼词最为感人，也即是本文开头引用的那段话。随着加缪的离去，他所关注的政治问题也走向彻底解决，其哲学讨论亦被人们遗忘，加缪的思想和声音，便逐渐成为已然逝去的历史中一种遥远而模糊的回响。 进入二十一世纪，新的问题和挑战接踵而至。恐怖主义抬头、难民问题、气候变暖，现在还有全球性病毒的空前大流行和根深蒂固的种族歧视：种种危机使迷茫困惑的人们又将目光重新聚焦到这位英年早逝的哲学家上来。半个世纪过去，如今加缪朝思暮想的阿尔及利亚已经独立，二十世纪欧洲知识分子的左倾狂潮也早已过去，那些冷静下来、又一次认识到这位文笔凝炼的作家的文字中蕴含有深刻、富有道德意义和一种伟大的人道主义的哲理的人们，大概不会否认阿尔贝·加缪半个世纪前领悟到的道理，仍闪耀着沉重但轻盈、伟大但平凡的人道主义光辉： 在这儿我领悟了人们所说的光荣：就是无拘无束地爱的权力。 ——阿尔贝·加缪 纪念碑文阿尔及利亚 — 完。— 参考： 《加缪全集》阿尔贝·加缪 《加缪生平与创作年表》李玉民 《论加缪的思想与创作》柳鸣九 《加缪的自我解码》李玉民 以前写的蠢东西… 拿来凑个数好了qvq","link":"/literature/albert-camus/"},{"title":"我的大一啊，sigh","text":"那啥，本来是不大喜欢写什么“总结”之类的东西的，一来这些东西本来用处不大，写着也浪费时间；二来按什么“有多少个‘第一次’”诸如此类的分类式总结，咱记性又不怎么好，让我硬去凑这些个分类，也不怎么好玩。 可是啊，最近实在是有点太迷茫了，感觉不回望下过去，未来也不知道应该做什么；有些太累了啊，对计算机和代码、和种种__本应__坚持的事情的兴趣如果不是已经消退——希望不是——也是锐减了，或许这就是颓废吧。 所以，各位应该已经从字里行间闻出来了——这是一篇自我色彩浓重的文章，尤其是，不可避免地包含了大量自己对自己的评价和看法。当然这一年来也少不了技术，但若读者期望要从本文中获得什么知识性的见解之类，恐怕是要落空的了。 这就算是safe harbor了——若对这样色彩的文章不屑一顾的读者，想必对我这样的人，也不会有什么兴趣的；若是如此，本文自然不是为您而写的啦——毕竟这是个人博客，自我色彩浓重的文章，也没什么不应该的吧？ &nbsp;头图摄于2019年国庆期间，于广州地铁三号线地狱西。 技术前两天在群里搜一个大佬发的链接的时候偶然翻到了去年二月份在群里的发言，发现自己那个时候在群里问了一个有关Kotlin声明处变异和类型上界的问题…… 问题是挺基础的，我想我现在应该不会再问这样的东西了。不过，想到有很长一段时间都受身边人的影响强行把时间和精力都砸到了并不喜欢、并不感兴趣的方向上，感觉确实是蛮不应该的——细想了想自己学很多东西的时候很难分辨出「感兴趣，喜欢！」和「哇这个好酷好帅好高大上教练我也想学」之间的区别，很多时候做的一些事情、学的一些东西与其说是真正学到了什么，“提升”了自己什么，不如说仅仅是为了让自己在「别人的眼中」很厉害而已——但事实上却完全不是。 一年以来，我已看到真正低调的强者是什么样子。和真正的大佬比起来，我想我确实是只会被秒得体无完肤而已：面对一群拥有你极度渴望的器物和能力，达成了你始终认为高不可攀的成就，经历你自认只能永远观望的体验——这样的感受并不奇怪，我会为此开脱，这样的想法，是平凡的： 但是，这个回答却也是再正确不过了——何必呢？ 何必呢？可或许这样的一课是避不开的吧。很早以前「友人P」（这么匿名式的称呼感觉好好玩啊 (￣▽￣)”）在评论一位我们都认识的网友时说（大概是这样），他正在经历认识到自己并不天才并不全能的阶段——我大概也会这么说现在的自己吧。这样的挣扎，对于一些本就十分低调、十分「擅长反思」并对自恋心理和自我中心主义怀有警惕的人们来说想必看起来是既可笑又幼稚，但只可惜我不是那样的人：我是挺幼稚，也挺可笑的。 果然如预想中那样跑偏了——一年来我学到了什么呢？除了这样的仍「在路上」的认识，我想，或者说，我希望，自己技术上还是有所进步的——至少我，至少应该不会再问“Kotlin中什么和Java的 extends ? 对应？”这样的问题了…… 吧。 Kotlin熟练II，开了个DSL的新坑；后端踩坑无数，Exposed，Ktorm；Ktor，http4k。还有gRPC，那会儿官方的Kotlin支持还没出，社区做的kroto+是真的难用…… 不过现在的官方支持倒是没用过也没看过。 计组专精II，整了整计组，看完了《软硬接口》，正在拿SystemVerilog和Verilator写简单的MIPS CPU，到本文写作时基本完成了18条核心指令的支持、五级流水线和所有的冒险检测、旁路之类，打算再把cp0也给弄弄…（可以康康咱以前写的博客文章，希望还会继续更新……） 老实说并不如之前想的一样那么难。以前总觉得「哇，这个东西那么牛逼，我这辈子肯定都搞不定」就连真正坐下来写的时候也总想「唉，要写流水线了，这难得要死肯定不会弄」、「唉，要做旁路了，这太复杂了肯定整不出来」之类，但是写完了就有种「就这？」的感觉… 如果瞎想是一项运动，我早TM是世界冠军了。 函数式有点兴趣。看了一些乱七八糟的文章和conf，还发现了一本挺棒的Haskell书书，一千多页看了两百多了… 英文不好看的很慢，可惜也没办法；打算继续看完，期望是人生第一本读完的英文书籍… Scala专精I。总算是看完了喵呜呜很早很早很早以前送的Scala书书，被圈粉。写了一些没什么用的试验代码和一点gRPC的测试，不得不说ScalaPB比kroto+好用多了… 还看了看Dotty的强强语法，是真的强强。 过度设计专精II。写项目架了一个超大超傻的技术栈，容器化docker-compose，反代traefik，web托管Caddy，后端AdoptOpenJDK，OAuth认证中间件Hydra，业务数据库MySQL，时序数据库Graphite，可视化Grafana，容器管理Portainer，资源监测Netdata…… 感觉自己简直脑抽，希望还是学到了什么东西吧…… 总的来说就这些。还看了看Vim之类，不过用的很少，也不怎么熟… IDEA倒是用得熟练多了，新记了不少快捷键；现在对敲键盘时还要不时碰一碰鼠标这样的打扰要敏感多了。 按我这个后见之明偏误由来已久的功利主义上脑的废物的习惯，自然要问的问题就是——这些时间中，有多少花得值呢？写不写一个五级流水线CPU、知不知道什么是TLB、能不能用MIPS写递归求阶乘、了不了解操作系统如何管理内存——这些到底在多大程度上会影响未来的——尽管，我无比希望能是「现在的」——实习和工作？一个所谓科班出身，学习过这方面内容的程序员，和一个对此毫无了解的程序员，在应对千变万化、纷繁复杂的实际业务需求时，到底会有怎样的差别？ 我不知道。程序员社区里总有人讨论这些，也总有人说，这些会渗透进思维中，或者足够高要求的业务总会逼迫用上这些东西云云。但是真的如此吗？ 现在做的东西到底有意义吗？我走的路是正确的吗？ 我未来到底要做什么？我到底喜欢什么？我到底喜欢计算机、喜欢技术吗？ 唉，我也不知道。很喜欢写Web后端吗？很喜欢Vue.js糊前端吗？很喜欢做存储、基础设施吗？很喜欢大数据吗？很喜欢FPGA吗？很喜欢化学实验吗？很喜欢计算机吗？？ 如果不是，如果对任何已知的方向说到底都没有多少兴趣，那该怎么办？ 去年，或者即便是今年早些时候，我都还有想着几项不多、但对我来说相当昂贵的梦想，想着大学有闲的时候能有钱自然是再好不过；现在看来，大概只是空想而已吧…… sigh. 生活最轻松、最好讲的部分当然要放在最后面啦——不过，看到这儿还不觉得是在浪费时间的读者，应该也没有几位了吧？ 高中毕业之后的假期和网友面包包、🍋、信酱酱去上海组队打了一次hackathon（需要理解，那时候我还以为自己天下第一…），之后和前两位在上海玩了两天。 人生第一次自己在外边旅游，真的挺舒服的。很自由。（当然得有钱… 如果这钱是自己挣的就能是百分百的无忧无虑了，可惜于我而言这估计还是令人难受地遥远…） 后来国庆的时候和（几乎是唯一几位比较熟的）朋友们去了广州，也即本文头图的由来。总感觉一个城市有没有河、靠不靠海是很大的区别，希望以后自己也能在一座有河或者靠海的城市工作、生活。 今年一月份一个人去了趟深圳。老实说一个人自由多了，到处跑，两天去了好多地方。面基了腾讯大佬t桑，羡慕了一圈老干妈总部内部实用简单的精致；只可惜那时候还不认识e哥，第二天去深圳湾天气也不大好。 去的绝大部分美术馆、博物馆都是免费的，不仅免费还送纪念品，有钱的城市就是任性。市民中心底下就是深圳市政府，一整片玻璃幕墙，身体力行地告诉你什么是有钱的现代化城市。市民中心那片的公建是真的有艺术感，太富了。当时想着要在深圳工作生活，现在想想还是算了…… 旅游就是拍拍拍，自那以后就很想拥有一台富士XT-30，或者什么相机之类，不知何时才能摸到自己的截幅微单呢。 日光之下没了，这篇文章就到这。希望下一篇能回归有些用的技术主题文章吧。 不过最希望的还是，时间能为我解答这些让我完全睡不着觉、每天要翻腾两三个小时，代码也没法写、只能每天躺平浪费时间的恼人问题啊…… 不过最最希望的还是，能当下送我一个大厂的实习就好了啊。（大哭哭） 十点了，又浪费了一天。","link":"/life/freshman/"},{"title":"咱的新博客","text":"一直打算自己写博客的一套前端和后端，前端本来已经写了挺多的了，现在看来是要搁置很长一段时间了… 感觉折腾这些毕竟没啥用，还是要花时间写文章才行。。 可文章也太难写啦QAQ，每次都感觉开坑写了两行就不想动了，总感觉有些东西不能说得有些见地就不如干脆不动笔以避免「灌水」之嫌。总之以前的文章大概是不会发上来了（因为太黑历史了）这个博客大概会放些近期自己写的东西，科幻评论啊，以及稍微长一些、图文并茂的、不适合放在咱Telegram Channel（左侧有链接）的一些玩意，向e哥和冰冰两位大佬看齐QAQ 就是这样。总感觉现在这个新主题有点太冷淡了些，以后再慢慢调吧……","link":"/misc/hello-world/"},{"title":"我与科幻的故事，以及不情愿地2021","text":"Update 2021.1.10： 本文主要内容是一篇旧文，以及一些有关2021的文字。 最终还是打算把文章贴到博客上来（其实是一直忘了），做了一些修改，补了一些最近的我与科幻的故事。顺便这篇短文的一个选段居然还真在SFW2005的《回声》专栏上刊出来了…… 然而选的是现在看来比较尴尬的一个段落，感觉是真的羞耻（（（ 以下内容（直至文末的分割线）作于2020年2月份，经少量修订。文末有关2021的内容作于今日。 这篇文章，是我昨天晚上读完一直没读的2019年11月刊《科幻世界》中迈克·雷斯尼克先生的作品《冬至》后，熬夜到两点多写完的：纯为给自己一个交待，作为一位“半吊子幻迷”，科幻如何伴我同行六年，如何见证我通过中考、高考，从一个瘦弱、人缘很差、常受人欺负、好动又中二的初中生，“成长”——如果有的话——为一个热爱计算机、科幻和爵士鼓，正在不断敲击着一台Surface以捕捉脑海中飞絮般不断飘散的思想的化工专业大学生，同时也表达了我一些一直以来的体会，或者说是困惑。我要感谢我初中的“图书馆”、高中图书馆、镇图书馆和《科幻世界》，他们引领我，也构成了我走上科幻这条人迹罕至的道路初期的全部；我也要感谢我的父母，即便我中考和高考都是彻彻底底的失败——这不是科幻的错——他们也一直以他们的方式默默支持我。没有这些人，没有这些满溢书香的图书借阅室，我绝不会认为科幻是我一定要一直喜爱的东西。 以下是全文。本文成功刷新了我单篇文章的字数记录。冲动之下，我将这篇文章发给了SFW编辑部——老实说，不知为何，有一些后悔。 刚读完迈克·雷斯尼克先生的老作品《冬至》，因为是刊在去年《科幻世界》上的，作品末尾还附上了艾珂（刚才得知，负责过我最喜欢的科幻小说之一，《闪耀》的编辑刘维佳老师已经离开了《科幻世界》编辑部）编辑的编后记，其中宣传杂志社的义卖活动以支持这位身患重病的老作家。《冬至》是典型的历史奇幻小说——个人认为在国外明显地比国内流行——讲述了大魔法师梅林对衰老，对于这位来自未来的时空逆旅者，这意味着他会逐渐“忘记”未来，变成一个一无所知、仅仅拥有过去的“年轻梅林”，的充满无力感的恐惧。作者在这部获得1992年雨果奖提名的作品中，以一贯具体入微、细致流畅的笔调，重点突出了这位魔法师对于这种失去，这种对于“永恒之物”的忘却的冰冷绝望，犹如“渐冻人”般眼睁睁地、痛苦万分却又无能为力地被时间击倒，不断徒劳挣扎却只能缴械投降的悲痛。然而最为不幸的是，这一切竟成谶语——迈克的这个故事发表二十八年后，它的作者，迈克·雷斯尼克先生，因病逝世：这使得《冬至》最后几段痛苦、声嘶力竭的呐喊，编后记中对于老先生身体转好、正创作新作品的叙述，都蒙上了一种沉重而又模糊的悼念意味。 事实上这已经是一个月前的新闻了——所以显然，这只是一个用作引子的联想。以下才是正题：我买的第一本科幻书籍，就是迈克·雷斯尼克和姚海军先生合作主编的《世界科幻杰作选》，大概也是在恳求家长许久之后才得以实现的愿望，想来也差不多有6年了。最初发现《科幻世界》，大概是在初中的图书馆。说是图书“馆”，其实却有些名不副实：那时候的初中还是——当然，可能现在也是，毕业后再也没回去过，对此我极其愧疚——个“小破校”，远不如今日受就横卧在隔壁的镇政府的重视，最简单体会的结果，便是没钱。那时候学校的图书“馆”只是个二层的小平房，正门平日不开——不是“平日”似乎也没开过，只有从有时稍留一个小缝的铁拉闸侧门，才能进到这座图书馆的一楼。每周会有体育课，要先是经过显然学校引以为豪的国家三级古树南洋楹，再经过这扇侧门，才能到最讨厌的操场。我从小就体质很差，任何体育相关的活动都是我的心头痛，考试更是会要了我的命：不喜欢的体育课和这扇侧门间微妙的联系，就使得这扇侧门有种隐秘的象征意味。上课前要留意门有没有开，这样才能在跑完一千米、气喘吁吁累得要死要活走回教室的途中，溜进绿色瓷砖包裹的图书馆：跨过门边挂着写着“华人基金会捐赠”的牌匾的铁拉闸门，进到图书馆不大的一楼。一年中的大多数时候，广东灼眼的骄阳会透过楼梯转角上的窗户，在一楼楼梯墙边胡乱堆放着各类、过期没过期全堆在一起的杂志报纸上投射下斑驳的阴影。或许是由于此处本来就“人迹罕至”，从未听说有借阅制度，随便翻找一番，按照那个美好年纪美好的审美情趣稍加挑选，就这样认识了《科幻世界》。 当然，必须要承认，我不能保证以上叙述和真实的关联：写着“华人基金会捐赠”的牌匾是不是挂在侧门边上我已不大记得，但是肯定有这块牌匾；和《科幻世界》的“初见”可能也不会这么地富有情趣。但是——这样说得好像我是个已经看遍天下间各类事情的“大人”一样，抱歉，我未能找到更加谦逊的语词——六年过去，我做了很多错事。前阵子看最喜欢的作家阿尔贝·加缪的《第一人》，雅克，其实也是加缪本人，感觉颇有共鸣：当然（可怜的是，哎）我并没有那么聪明，但至少加缪说的“太好动，爱出风头导致做了不少错事”，这一点，绝对就是我。 所以这些时日来，我一直觉得要是真有什么我不后悔，也一直没有放下（算是吧）的事情，就是科幻。初中大概是我看科幻最“猛”的一段时期，各种各样的作品都看过一些：被英语老师没收——至今还没还我！毕业前夕我可是盼了好久：大概老师也忘了——的《艾达》；长久以来一直喜欢、并长久以来一直热望其推销词中“被买下电影改编权”能彻底落实的《时砂之王》；基本没看懂因而现在也不怎么记得的短篇小说集《微宇宙的上帝》；因而知道了海因莱茵、至今仍记忆犹新的《严厉的月亮》；去镇图书馆翻杂志时“偶遇”，极其喜爱以致请图书馆管理员帮忙找出所有库存，一本一本看完，兴奋劲儿还没过就被迎面撞来的“停刊通知”砸得有些难过的杂志《新科幻》；当时读完感觉惊为天人发誓一定要在那个买书还有种郑重感的时日里读完全系列但又抛诸脑后，近日整理书架才发觉的《太阳潜入者》；还有人生第一部在网上读完的文学作品《三体》（没想到吧）。虽然科幻目前为止陪伴我的时光还不算长，迄今为止这篇文章也是仅仅是我第个位数篇有关科幻的东西，但已经足够让这个好动、莽撞、爱出风头又“中二”的我觉得，科幻，是一定要一直喜爱的东西。 你可能会感觉这篇文章就快要结束了，然而它并没有——是的，科幻，大概是唯二我能说是一直没有放弃的东西中的一件（另一件是爵士鼓）。在这里应当加一个“注”，那就是（可怜的是，哎）这唯二的两件事，我都做得不怎么样。拿科幻来说，我从来不敢称自己为“幻迷”，因为相比真正的幻迷们我确实还不够，而最多最多，只能是“半吊子幻迷”。比方说，相比我看过的《科幻世界》，我真正能留在手边的——是“订”的而不是“借”的——实在是没有多少，也占不到多大的比重。一直以来，我都觉得相当遗憾，因为很多优秀的作品要再想找到，只空有标题和作者，显然会难办许多；而更令我遗憾的事情，那就是我直到2018年，才觉得应该要把看过的好作品，至少要把标题和作者记下来：这导致我忘记了不计其数的优秀作品。这些令我觉得自己因而只能算是个“半吊子幻迷”的故事或许能让各位读者更加理解我对于科幻的复杂感受。那么，如果要说我这个“半吊子幻迷”，对科幻，能有什么切实的体会，那就是，科幻，是个真正孤独的爱好。 是这样的。（应该也，或者说希望会有一些幻迷能和我这个“半吊子幻迷”有一些共鸣吧）在《科幻世界》的“我与《科幻世界》特别征文”专栏里，看过不少幻迷讲述自己认识科幻的故事，感觉他们中不少都能在现实生活中遇到比较喜欢、也能畅通地交流科幻的人。照我说，这不能不说是一种幸运：因为我就从未遇到过。不仅是在现实，就是在网上我不大的圈子（或许这就是原因）里，也从未听起人提到过四个字，《科幻世界》。初中时还觉得没什么，那个时候的我对科幻作品应该还没有什么具体的想法或思考，但到了高中，这种情况就有些难受了——经常麻烦了我那些同学们，要礼貌地听完表达欲强但又不怎么精通表达的我，大谈特谈自己刚在晚修偷着读完的科幻小说是多么地激情洋溢，多么地启迪人心。进入大学，这种情况也没有什么改观：原本还列在社团列表里的科幻社团，一问才知，早已撤销。 所以，在没有同学能够打扰的时候，就只剩我自己了：我养成了一个很不好的习惯，那就是“打脑仗”：深刻地、反复地自言自语。因为懒、也没有能力去动笔写东西，长久以来我就这样排遣脑海中无穷无尽的怪异想法。当然，也有罕见的例外，能够成功安利不多的几位同学去读某篇我大力鼓吹的科幻小说，并且其中的一两位还能对我的吹捧表示某种程度上感同身受的体认；印象最为深刻的例子便是周华杰的《时间徒刑》 ，这部作品少见地在同学间掀起了一阵来也快去也快的热潮，也能听到了不少夸赞之声。这一事件，再结合同学此前跟我谈到啃《三体》没能啃动只得弃书的故事，导致了我一种可能有些错误的印象：这一类的科幻作品，要比更“硬”一些的，更方便“安利”。然而这部我给了五星力挺的作品在其他评论中也就是个三星左右的评级，或许我该反思一下自己不怎么深刻的思想和有点儿怪异的审美吧…… 就这样，我就靠着图书馆借的《科幻世界》，还有过年和生日（大概隔半个月，这意味着钱包能短暂地稍微鼓些）精挑细选的科幻书，磕磕绊绊地，带着希冀亦有恐惧，来到了21世纪的第三个十年。我也算是见证了《科幻世界》的几次改版，加了前插，加了「回声」专栏，加了底下的小字「幻迷发言」之类；如今不用再借了，我订上了《科幻世界》，先是译文版，再是标准版（我得说我也不知道该怎么叫这个“版”），再到打算下次续订时两种都订，我始终如一地感谢科幻带给我的一切，不管这种爱好于我是否“孤独”，我想，这个丰富多彩、广阔无边、生机勃勃、充满无限可能令人无限遐想的世界，这个科幻世界和这个《科幻世界》，是我一定要一直喜爱的。 最后，热切盼望成都能成功申办2023年Worldcon。更加盼望的是，在2023年的八月中旬，我也能造访这个憧憬已久的城市，手持入场券，人生第一次，满怀喜悦和激动，踏入纯正科幻盛会的会厅。 看着自己一年前写的这段文字，突然感觉十分怀念。 已经记不清楚写下这篇文章时的场景和动机了——只能从时间上推断，大概那会儿确实是在家里无所事事，捣鼓科幻和科幻评论的状态。 一年过去，很多事情都永远改变了。和一些人就此作别；认识了新的朋友；组了乐队，上了学校的音乐节；学了一些新东西，可能放弃了更多的东西。比如，自这篇文章完成以来，我已经很久很久没有阅读任何有关科幻的文字了——尽管阿缺和张冉的短篇集就在手边。 比如，从前每天都陪着我的《夏目友人帐》，上次随便点开了一集，却最终也没能看下去；比如以前总爱在网络上和几乎从来是固定的一批网友闲聊；比如已经很久没有看到过卖弱的言辞，甚至已经忘记了当时看到这些话会有什么感受；比如一向不爱看电视剧的我如今每天都必看《老友记》，并由衷地为角色们的遭遇而愤怒、感动；比如如今打字再也不用空格做分隔符，而是会认认真真地把每一个标点都加上；比如似乎更加孤独，因为没有了曾经习惯并视之理所应当、分享各种事情讨论各种问题的一群人们。 回想一年前自己处于怎样的生活状态、又以怎样的心态度日，已经完全是一片模糊。自己那些伤害他人更伤害自己的缺陷有改进吗？与一些始终无法忘怀、永远萦绕心头、时不时使我彻夜难眠——正如以前一样——的要命的想法和念头的抗争，有任何成效吗？和一年前相比，我有更坚定吗？我有更坚强吗？我有更幸福吗？ 我不知道。 但是，我真的很想把这一年再过一遍。如果那样，或者说，如果能让现在的我处在一年前的位置，我或许会多做一些努力，我或许会多抗争一些。 我真的很不想就这样2021。 &lt;全文完&gt;","link":"/life/me-and-scifi-and-2021/"},{"title":"作为现代音乐支柱的爵士鼓（架子鼓）(1)：总论","text":"动笔写这篇文章的时候，在两个（其实差不太多）的主标题之间犹豫了很久： 爵士鼓（架子鼓）全面综论 和 作为现代音乐支柱之一的爵士鼓（架子鼓） 纠结半天，最后觉得还是后一个标题更好：不仅仅是看起来更富有文学气息，同样也更突出重点：这一系列文章（如果本大懒寒能不咕咕咕的话…）将围绕爵士鼓作为「现代音乐不可或缺的一部分」，特别地，是作为节奏型乐器，在现代音乐舞台上和其它乐器的显著差异组织和说明的。 为什么要写这篇文章呢？大概主要的动机是很早以前看到的一张梗图： 想来自己也无疑如此——一旦有人，无论是谁，即使只是不经意间，即便只是随口一说，提到有关爵士鼓、欧洲文学、科幻文学、（一些领域的）编程、jrock/jpop/ACG、英伦摇滚的事情，我肯定要说个没完没了了——而且多半会说得太多，弄得仅仅只是随口一提的无辜的可怜人不得不听本菜菜寒飞快、激情，兴许还两眼发光地讲个没完，无疑十分尴尬。可惜咱的爱好大概算是比较小众，这样的机会也少——即便有，强迫另一个人听本没文化寒唠叨个不停，也未必就是什么愉快的体验。既然如此，把这些东西写下来，放个人博客里（应该还是相当相当少见的吧？谈论爵士鼓的个人博文… 本寒似乎就从来没见过🤔），既不麻烦人，也可一举满足本寒几乎无穷无尽的表达欲和「安利欲」，想写多长写多长：一举两得，岂不美哉？ 于是就有了这篇文章：感兴趣的话题、热爱的事物，写起来想必是相当轻松的。本文主要是作为一位垃圾鼓手，以及jpop/jrock/ACG/brit rock/post rock爱好者的视角写成。部分术语、讨论尤其是历史性内容主要基于个人认识和经验，若有异见和补充，欢迎在评论区指出。 最后需要感谢我的——掰掰手指头，一共是——四位教师。身处一个并不发达的小城市，教师们也常去别处发展，这无疑是一件令人遗憾的事情；鼓手魏士朝（他的知乎；他的B站）是我第一位在网上认识的鼓手，与他的交流相当地「补完」了我对硬件的认识，尤其是收音录音相关的知识；（可能是大陆唯一的）鼓手自媒体鼓左言右质量卓越的评测和分享，是信息闭塞的时代背景下大陆打击乐资讯的重要媒介。 如前所述，本文——若无意外，若不又又又又咕咕咕咕咕咕咕咕咕——是一系列文章中的第一篇。除了「总论」，还会有「硬件」以及“软件”，如自学、练习的经验之谈云云，也会在以后的文章中涉及。 以下就是正文内容啦。抱歉，废话有些多，希望各位能学到些什么；也算是给我国贫瘠地令人震惊令人心疼的打击乐和摇滚乐做一点微不足道的贡献… 以下内容，尤其是历史相关的内容将会必不可少地涉及一些专业名词，但并不影响阅读和主旨大意，略过即可。对这些名词的解释说明将是后续文章的主要内容。 &nbsp;Photo by &nbsp; Gabriel Barletta &nbsp; on &nbsp; Unsplash. 爵士鼓（架子鼓）现代意义上的爵士鼓（架子鼓，drum kit）——顾名思义，最初起源于爵士乐这一几乎是现代音乐鼻祖的音乐形式。在如今复杂纷繁的鼓组组合诞生之前，在军乐队及管弦乐中常见的脚鼓、三角铁、镲片等，通常由不同的乐手演奏。到19世纪中叶，出于节省预算、提高「四肢利用率」等各种各样的原因，以及“双重击鼓”（double-drumming）技巧的发明和流行，各类用途、各式音色的立式鼓被制作出来并形成组合，由更少的乐手演奏。如今交响乐团中常规化的“定音鼓”，或可看作现代爵士鼓的雏形。 如图所示，这样的组合最为明显的特点，即是没有踏板（pedal）。现代爵士鼓右手一只鼓棒，左手一只鼓棒，右脚底鼓（地鼓，大鼓；bass drum）踏板，左脚踩镲（Hi-Hat）踏板，可能还要带上底鼓双踩左踏板的“四肢占得满满当当”的配置，则要等到20世纪后：1909年，以其创始人命名的历史悠久的美国打击乐品牌Ludwig——该品牌的军鼓即便其响弦调节器（snare strainer，曾听到有大佬将这玩意戏称为“扳机”，xswl🤣🤣🤣）的难用程度臭名昭著，产品音色依然享有世界声誉——生产并发行了世界上第一款底鼓踏板系统，为现代爵士鼓的出现铺平了道路。到第一次世界大战时，由于现代音乐的变革、「乐队」，而非「乐团」形式军乐队的兴起和爵士乐广泛深刻的流行，使得现代意义上的爵士鼓出现在舞台上，并逐渐成为现代音乐中不可或缺的支柱。 爵士鼓作为现代音乐支柱爵士鼓圈，流行一个经久不衰的笑话： 在乐队中跟鼓手发生冲突一般的结果只有两种，自己走人或者乐队解散。 还有另一个： 假设乐队没有主唱，可以玩后摇 假设乐队没有吉他，还有键盘 假设乐队没有键盘，还有吉他 假设乐队没有贝斯，根本无所谓 假设乐队没有鼓，那就不是乐队了，只能算个组合。 没有鼓手的乐队不能叫乐队。 又黑我贝斯。 虽说是个笑话，且无疑有严重的鼓手们乐此不疲地“自吹自擂”，“学什么乐器，就说什么乐器最难学”、“自己往自己脸上贴金”的嫌疑，可在某种程度上，这些也确实是事实。重点是，爵士鼓在现代音乐中的重要程度、支柱地位，与大众对爵士鼓缺乏了解和认识，是极其不成比例的。这一现象在国内尤其明显：从线下教学到硬件销售令人瞠目结舌的严重落后，不仅使大陆打击乐生态乏善可陈，更使得国内摇滚乐发展举步维艰。 爵士鼓在现代音乐中的支柱地位，与其作为常见的乐队配置中唯一的节奏乐器这一既成事实，是密不可分的。常见的五人组乐队，主唱，电吉他，电贝司，键盘，爵士鼓，无疑仅有爵士鼓完全缺乏“音调”这一表现维度，成为唯一的节奏乐器。在大量的乐曲演奏中，鼓手的首要职责即是保持乐曲速度的恒定和节奏的平稳，这对鼓手而言既是要求，亦是责任。对应于此，不少流行乐（常见于英伦摇滚（British rock music）），如Coldplay（酷玩）乐队、以及我最喜欢的乐队The Coronas，作品的爵士鼓节奏缓慢、单一、重复，起到的作用几乎仅仅是作为”节拍器“，为乐队中其它乐器提供重要基本的律动参考。 本寒曾看到一则评论，说一个月内就能教会完全零基础的初学者所有酷玩的歌曲——我大概也认同这则评论，这对大陆爵士鼓、以及各大酷玩乐队的爱好者们来说或许都是个好消息，哈哈~😉😉 但是，现代音乐中对于爵士鼓功能的低要求、浅认识，引起不少注重技术和「脉冲」（pulse）的鼓手的不满。不仅是鼓手——在编排乐曲时，各乐手常被告诫、也必须谨记在心的原则，就是 “要给主唱留空间”：鼓手所代表的「节奏」，和电吉他、电贝司、键盘等所代表的「伴奏旋律」，与主唱所代表的「主要旋律」之间的冲突，成为推动20世纪下半叶现代音乐变革的重要因素。 20世纪60年代，摇滚乐、金属乐的蓬勃发展促成了重型乐的广泛流行。在伴奏和主唱间难分难解的拉锯战中，摇滚乐、金属乐促成的音乐的重型化，无疑是一次重要的尝试。这一尝试的主旨和基调，那就是——大家都猛些。电吉他开始大量运用高度失真效果器（distortion）和高度过载效果器（overdrive）；主唱声音强有力，且经常大段使用对不少人（比如本寒）而言难以接受的嘶吼唱法（黑嗓、死嗓等），爵士鼓则将歌曲的速度提升到难以置信的新水平，动辄200bpm甚至250bpm的手上单击、脚上双踩，无疑是对鼓手激素水平、身体素质、听力保护措施以及演奏能力的前所未有的考验。 有没有其它的路线？这是重型乐方兴未艾之时，大家都在思考的重要课题。除了大家都猛踩油门加速加速加速加速，还有没有其它办法？这样的探寻又一次推动了现代音乐的革新。20世纪末，仍有争议的后摇滚（简称后摇，post-rock）的出现无疑是富有探索精神的音乐人们在这场拉锯战中又一次做出的新尝试：干掉主唱。完全摒弃人声的后摇滚强调律动和器乐，追求丰富、多乐器、多层次的旋律和颗粒感强、脉冲感强、层次分明的节奏，不需考虑人声的前提为该风格的乐手提供了更加自由的编曲空间，创造出的旋律递进感强，令人沉浸其中，不仅俘获了大批大批视旋律为第一要素的听众（比如本寒），更对其他的乐曲风格产生了不可估量的重要影响。 在现代音乐的发展时间轴上，爵士鼓始终在场，从未缺席，也不可能缺席。每一次乐曲的新变革都意味着爵士鼓的新「玩法」、对鼓手的新考验。作为或许硬件复杂度和硬件灵活度在所有常见乐器中最高的乐器，现代音乐的不断演变促使人们不断为爵士鼓发明新的技巧、工艺和配套硬件，也许这正是爵士鼓相关的硬件繁多冗杂地简直离谱的原因。 爵士鼓作为节奏乐器爵士鼓（架子鼓）在现代音乐中的支柱地位，与其作为节奏乐器这一本质同样分不开。音调这一听觉维度的完全剥离，意味着如今在各类其它乐器中占比相当的所谓乐理，相较而言，在爵士鼓的教学和演奏中，通常占不到多少分量。以下是当今世界上最为权威的爵士鼓演奏认证机构Rockschool的最高级别认证（8级）中对爵士鼓“技巧练习”部分的要求： 明显的是，除了大量——有一些我也还不知道是啥，看来我要是直接去考RSL估计是要挂的了——描述节奏型（即所谓rudiment）的术语之外，常见于乐理论著中的各类术语，如音阶、调式、和弦、琶音，并未出现在当代最为权威的爵士鼓认证的认证说明文本中。与此对应，同样由该机构编撰的电吉他（electric guitar）认证手册中，则充斥着大量与乐理密不可分的叙述和专业名词： “音阶”、“调式”、“琶音”、“和弦”，这样的文本对一位鼓手而言无疑恍若天书。值得注意的是，该机构编撰的木吉他（acoustic guitar）和流行键盘（keyboard）中同样包含大量极为相似的术语和考试环节，这是乐理知识在其它乐器中渗透广泛，且相互关联的明证。 顺带一提，几乎人尽皆知的通常意义上的所谓英皇（英国皇家音乐学院联合委员会，ABRSM） 并不提供，亦并不负责包括爵士鼓在内的现代音乐乐器的级别认证。通常而言英皇是在古典音乐，或至少是古典音乐乐器领域内享有世界声誉的级别认证机构——现代音乐乐器与其古典“对应”之间，如电吉他对原生吉他，流行键盘对钢琴，通常差异极大，演奏技巧、级别认证形式很难，也不会保持一致。大家在爵士鼓语境下常提到的所谓“英皇”，不过是对另一家总部同样位于英国、同样顶尖权威的现代音乐乐器级别认证机构Rockschool（RockSchool Limited, RSL）的错认。该机构为现代音乐乐器，如电吉他、电贝司、爵士鼓、流行键盘和一些相关领域，如音乐制作（music production）、声乐（vocal）等提供世界级、权威的级别认证。RSL与ABRSM无任何隶属或合作关系，是两家完全分离、独立的认证机构。 再顺带一提，爵士鼓领域两家顶尖的认证机构除了Rockschool，另外一家则是伦敦圣三一学院（Trinity College London，TCL）。这两家机构编排并录制的级别认证曲目及其demo技巧性强，风格意识明显，是当代鼓手精进之路上少有的质量优异的练习材料。 要在单一的节奏维度上表现风格、表达情感，这对每一位鼓手而言都是挑战。节奏如何表现风格？节奏如何表达情感？自现代意义上的爵士鼓出现以来，人们一直在思考。个人认为（以下均为个人看法和认识，若有补充或疑问，欢迎在评论区指出），其关键在于如何编排节奏，或者说如何控制节奏的疏密程度，来为乐曲提供节奏层次上必不可少的「脉冲」（pulse）——这个在上文多次提到但又为做解释的词终于又出现了。 乐曲要进行，必须有一波波向前涌动的冲力。考虑一个简单的节奏： 试听： var ap = new APlayer({ element: document.getElementById(\"aplayer-QagxrJsR\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Demo Drum Pattern 01\", author: \"Ray Eldath\", url: \"drum_pattern_01.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 这就是大家耳熟能详的“动次打次”——问题在于，这样的节奏在乐曲中多见吗？并不。事实上，这样的节奏在乐曲中几乎是不可能见到的：因为这样的节奏缺少脉冲。一下底鼓，一下踩镲，一下军鼓，一下踩镲，线性、均匀、毫无变化，毫无起伏。乐曲在这样和机械节拍器几乎别无二致的节奏中无法进行。乐曲需要脉冲，而如何创造这种脉冲则是爵士鼓演奏中风格差异的主要体现。再听一段demo： 试听： var ap = new APlayer({ element: document.getElementById(\"aplayer-ydLXxUuE\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Demo Drum Pattern 02\", author: \"Ray Eldath\", url: \"drum_pattern_02.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 这段demo虽风格特征仍不够明显（除了显然的half-time节奏型以及一丝丝若隐若现的R&amp;B味儿），但无疑已比上边那段好上了不少。重点在于这段demo是有起伏的，有脉冲的——从谱中和试听中我们或许可以隐约意会到这种脉冲的营造方式：分布不均匀的音符，时值变化的音符带来速度的脉冲；节奏镲（Ride）在击打镲帽和击打表面间的切分演奏带来“叮，(叮)叮，(叮)叮，叮”的律动感；基本节奏型之外，每四小节出现的加花（fill）通过急促的三连音过嗵鼓（筒鼓，Tom-tom drum）提示律动的切换和乐曲的转折。 如前所述，不同风格的乐曲有营造脉冲的不同方式。爵士乐（Jazz）通过军鼓边击（Rim-shot）、正常击和轻击间的音色区别来营造起伏的跳跃感： 试听： var ap = new APlayer({ element: document.getElementById(\"aplayer-IVAoTgJB\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Demo Drum Pattern 03\", author: \"Ray Eldath\", url: \"drum_pattern_03.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 放克乐（Funk）尤其喜欢在每一小节的第三拍添加（简单的乐曲是）前八后十六或（较难的乐曲则是）shuffle： 试听： var ap = new APlayer({ element: document.getElementById(\"aplayer-KQGMmGFv\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Demo Drum Pattern 04\", author: \"Ray Eldath\", url: \"drum_pattern_04.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 如前所述，快得离谱、脚发麻手抽筋、两脚当双手使的离谱玩法创造的密集、紧张的鼓点，是如金属乐（重金属摇滚，Metal）一类的重型乐的典型特征： 试听： var ap = new APlayer({ element: document.getElementById(\"aplayer-IkUWozDH\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Demo Drum Pattern 05\", author: \"Ray Eldath\", url: \"drum_pattern_05.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 相信各位已经明白我要说什么了：作为节奏乐器的爵士鼓，除了重要基本的“节拍器”功用之外，通过纷繁的外围硬件和多样的演奏技巧为乐曲提供脉冲，同样是爵士鼓的重要意义。不同风格的乐曲在声乐和器乐间选择了不同的平衡点，这也要求爵士鼓依据风格的不同，既要变化脉冲的强度，又要变化脉冲的表达形式。军鼓技巧、节奏镲技巧，以及各式外围硬件（如反镲（china——关于这玩意为啥叫「china」又是一则故事）、水镲（splash），牛铃（cowbell）、鼓刷（brush））为爵士鼓演奏增添的新的变量，持续推动乐曲风格的多样化和演奏本身的不断演进。 最后是几首来自RSL和TCL的练习曲demo；均为风格演奏，其中一些为专门谱曲，另一些为现有曲子的翻奏，但特别突出了器乐。通过这几首节奏明显的风格演奏demo，或许不同风格的律动感能够更加明显。 注意音频文件较大，一些网络环境下需要耐心等待加载。 Lead Sheet - 摇滚（Rock）： var ap = new APlayer({ element: document.getElementById(\"aplayer-jjeAPfUp\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Lead Sheet\", author: \"RSL\", url: \"Lead_Sheet.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 大量出现了正拍的底鼓敲击、军鼓边击，密集的过嗵鼓加花和独段的军鼓solo；build-up段落亦有长段的密集军鼓敲击、重音移位敲击和长滚奏（long roll）。 Crazy In Love - 节奏布鲁斯（R&amp;B） var ap = new APlayer({ element: document.getElementById(\"aplayer-cKkDaUyF\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Crazy In Love\", author: \"TCL\", url: \"Crazy_In_Love.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); Freightshaker - 蓝调（Blues） var ap = new APlayer({ element: document.getElementById(\"aplayer-iWqvPHCY\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Freightshaker\", author: \"RSL\", url: \"Freightshaker.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 急促但又极短、 几乎每拍都有 一下的踩镲 “(嚓)嚓” 声和节奏镲 “(叮)叮”声推动着整首乐曲，并在各段落间通过长过嗵鼓和滚奏衔接。 Full English Breckerfest - 放克（Funk） var ap = new APlayer({ element: document.getElementById(\"aplayer-rxJTfIhE\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Full English Breckerfest\", author: \"RSL\", url: \"Full_English_Breckerfest.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 注意主歌（Verse）段落每小节第三拍必定出现的开镲（open hi-hat）和切分音。 爵士鼓作为相当昂贵的乐器鼓手的培养成本在大陆是相当高昂的。这也是大陆鼓手稀少、重型乐不发达的重要原因。 大陆的打击乐生态是相当差的。极少数城市的琴行有面向销售的实体真鼓或电子鼓，如英国 Drum Center of Portsmouth 一类，提供数百款鼓棒、上百套鼓组（drum kit）、上百种军鼓、数十种脚踏和数千款 镲片（Cymbal） 的打击乐中心，在国内，即便是一线城市，可能连一家都没有。大量鼓手购买硬件时不经思考，仅靠教师推荐或道听途说，购买价格高昂又实用性低的成套镲片—— 老板，给我直接来一套大K！钱我有的是！ ——丝毫不考虑镲片的高度客制化性质，纯图方便，导致大陆市场长期被大量老旧的套镲型号占据，高端型号（如Instanbul Mantra, Istanbul Anniversary, PAISTE Signature）不在国内流通；一些较为罕见的尺寸（如25+寸节奏镲）和厚度（如Extra Thin）在国内根本无法买到，需要花高价在 Amazon 上海淘或去日本购买。 一系列因素导致大陆的打击乐硬件成本高昂。除开极差的生态，乐器行业本身的高利润率也是其一——一些型号的镲片、套鼓，所谓的渠道价（“发价”）甚至仅为流通价格的一半。对于爵士鼓这样的大型乐器、极高音量乐器，首先，在房价无上限的城区，光有个能放置一套爵士鼓的房间就意味着不可小觑的经济实力…… 除此以外，需要相当完备的隔音、减震、吸音措施才能不招致邻居的反复投诉：在常规密集规划的高层居民楼，装修出一间不打扰邻居的鼓房几乎是不可能的事情。 爵士鼓教材稀缺，世界范围内都是如此。面向自学编纂的爵士鼓教材更是闻所未闻——绝大多数教材仅覆盖某一演奏方面或某一特定的乐曲风格，无法作自学材料使用。大陆相关教材译本发行量相当少，导致原版价格高昂，影印版泛滥。绝大多数鼓手都是跟或专业或业余的打击乐教师学习，这意味着不菲的学费。 系统地学习爵士鼓需要毅力和高昂的时间成本。失去音高的爵士鼓的基本功练习极其枯燥，进步缓慢，远不是吉他“爬格子”之枯燥程度所能比较的；大量练习仅是跟着节拍器的单纯敲击，此类纯为速度的肌肉锻炼，需要耗费大量时间，且肌肉疲劳带来的拉伤和酸痛难以忍受。 一些爵士鼓演奏技巧有一定的危险性。真鼓的练习一定要有听力保护措施（便宜的3M耳塞或入耳式耳机均可），否则将造成听觉敏感度的显著降低（但不致听力障碍——希望如此）。一些技巧，如换手捏镲、手动制音、边击、交叉手过嗵鼓、交叉手扇镲等，可能刮伤或蹭伤手指：练习或彩排时由于激素水平过高受伤事后许久才发觉是家常便饭。几年前本寒曾经有一次彩排时用力过猛，右手中指第二指节直接刮掉一块肉，下台后经同学提醒才发现鼓棒上都沾了血，到现在那块地方的皮肤还是凸起来一块，而且很粗糙…… 爵士鼓录音不便。真鼓音量高，频率广，一般的收音设备（手机，平板电脑等）无法处理如此高音量、广频率的信号，收音效果很差。鼓手为保护听力和录音常配有完备的鼓麦、调音台和监听耳机，这既是一笔不菲的开销，又是相当麻烦的事情——7鼓组鼓麦需要七条独立的线缆，需要大量时间和耐心架设并调试相关设备。舞台上，由于环境不可预料、吸音或混响配置不佳还可能出现回声明显、音响啸叫等各种问题。 爵士鼓沉重。中低端往上的鼓组均为钢制结构，一些支架可重达五千克，钢腔军鼓同样重达数千克；演奏需要的镲片（通常必要四组共五张，视演艺效果所需可能还需若干张效果镲、反镲、副节奏镲等）总重量可重达数十千克，以致需要拉杆式的镲片车才能搬运。本寒自己搬一套鼓估计是肯定不行的……😥😥 除此以外，与爵士鼓有关硬件的介绍和练习等技巧的经验分享将会在后续咕咕咕咕咕咕咕咕咕咕咕咕中一一说明。 就这些了本文就这么多，总的来说已经相当长了，近7000字，无疑又一次刷新了本寒的单篇文章字数记录。两天肝出来这么巨长的一堆东西，果然爱好才是第一驱动力呢…… 哦对了，如果你也是鼓手的话，欢迎在评论区留下你的联系方式，或在左侧（下侧）的侧边栏中找到本寒的联系方式——我还有很长很长的路要走，很想认识一些前辈，结识一些朋友。 就这些了。任何讨论欢迎发在评论区，我会第一时间回复；若有其它问题（如本文中使用的一些demo的完整谱子等），请私下联系我。","link":"/music/drum-1/"},{"title":"First Step Towards FPGA (1): SystemVerilog Quick Take &amp; Pros and Cons","text":"Every time programmable hardware programming is mentioned, Verilog or SystemVerilog comes to our mind — such fact, IMHO, is ironically contrasts with another interesting, if not consensus, but at least first impression of those hardware newbies just like me, that the fundamental software and development toolkit in hardware programming field is far from diverse, mature and easy-to-use. Comparing to software engineering, there are not too much languages, tools or methodology to let you pick and choose, even among the limited available choices, most of them are either lack some important features, or just too expensive to investigate. Undoubtedly my first step towards FPGA, looking around and pick a combination of language, simulator and testing method, is a brief journey, but it also involved too many investigation as well as unexpected disappointment, which makes this journey more difficult, and more tiring. This article is intended to outline some of my conclusion, which is what I’m using now, and what I have used but quited. For me, there is a long-lasting haunting thought — writing a CPU, and that is the beginning of the story. About half a month ago I set sailed, and till now I have finished a testing library for Verilator, and a very simple MIPSs CPU that have nothing to do with pipeline, trap, and whatnot. So conclusion comes first: I’ve done most of these in combination of SystemVerilog (language) + Verilator (simulator) + CLion (IDE) + althas (testing) + Xilinx Vivado (synthesis). I will explain the reason just below. I’ll not gonna say this is the best workflow of hardware programming, specifically FPGA programming, it still have many incompetence in terms of my requirements which I’ll talk about them later as well, but I do hope this article could help you find a workflow that just suits yourself. This article will only discuss the very first part of my workflow, namely the SystemVerilog part. Remaining techniques will be discussed in the follow-on articles of this series, so stay tuned! Verilog / SystemVerilog ?JUST DON’T ask why VHDL is not mentioned. I won’t discuss VHDL here, for one thing I know nothing about this language, and for another I think it’s somewhat considered obsolete or just not recommended in many existing articles like this one. What’s different?SystemVerilog has been described as a superset of Verilog, which is another predominant language in hardware programming field, and it certainly is. SystemVerilog have an impressive outstanding compatibility with Verilog, most synthesis environment, at least Xilinx Vivado, allows you to instantiate Verilog module in SystemVerilog module and vice versa. Many Verilog definition could be directly translated into SystemVerilog, without or with only little altered. Here is a piece of code taken from my CPU project astrio (currently it’s still in private, I’ll publish it once I finished pipelining, trap, AXI bus and implementation on Zynq SoC, all sort of things), it can help you — I assume you already knew Verilog, and understand what these assign, always means — glimpse at the vanilla-SystemVerilog, and understand what’s new there: >folded pc.svsee code on GitHub1234567891011121314151617181920212223242526272829303132333435363738import Parameters::*;import PCType::pc_cmd_t;import Types::addr_t;module PC( input PCType::pc_cmd_t cmd, input addr_t load_pc, input bit rst, input bit clk, output addr_t pc, output addr_t inc_pc); initial pc = InstStartFrom; addr_t next_pc; assign inc_pc = pc+4; always_comb begin unique case (cmd) PCType::NONE: next_pc = pc; PCType::INC: next_pc = inc_pc; PCType::INC_OFFSET: next_pc = inc_pc+load_pc; PCType::LOAD: next_pc = load_pc; default: next_pc = pc; endcase if (rst == 1) next_pc = InstStartFrom; end always_ff @(posedge clk) pc &lt;= next_pc;endmodule : PC It’s not difficult to find out that there are many differences comparing to Verilog. I’ll highlight those are most important or influential in terms of the actual programming work: typedef in SystemVerilogYou may notice that there are some addr_t stuff in the code, and even if you are just a newcomer of C, you may still notice that here we adhere to the general naming convention of a typedef, namely suffixed whatever a typedef with _t, which I think is just inherited from C’s naming conventions. So as you may assumed, SystemVerilog do have typedef. Let’s look at the definition of addr_t: types.svsee code on GitHub12345678910package Types; typedef logic unsigned [31:0] addr_t; typedef logic signed [31:0] op_t; typedef reg signed [31:0] op_reg_t; typedef logic unsigned [4:0] reg_id_t; typedef logic unsigned [31:0] inst_t; typedef reg unsigned [31:0] inst_reg_t;endpackage : Types Okay, now it’s pretty clear. Generally typedef in SystemVerilog is no different from its counterpart in C/C++. Intuition always right, just use typedef (type) (name) to define your own data type in SystemVerilog to make your code more concise and configurable. BTW, typedef is a great replacement for parameter in many cases, use it wisely, and your code will definitely looks better. But, wait, what the hell is the package? package &amp; import: Package system and separate compilationExtract the common definition of your code, wrapped them in a package or whatever is always a good idea. It improves the readability of your code, alleviate namespace conflicts, and enables the separate compilation, i.e. when the code are recompiled, only the modified part is needed to be recompiled while the common and relatively less frequently modified part can be excluded, so less files will be recompiled, therefore speed up the recompilation. SystemVerilog supports such encapsulation by providing keyword package and import: the former is for encapsulate, the latter is for import it. One thing should be noticed: if you read my codebase that linked hereinbefore, you may find that only typedef, functions and some parameters are encapsulated in package, this is because typically they are the common part of your code. I won’t encapsulate my module in package, seems to me it just don’t deserve. enum &amp; enhanced case clause: enumeration works like a charmIn the pc.sv code above, there is a input cmd typed PCType::pc_cmd_t. You may guess that this is a typedef defined in package PCType, but what the actual type is? Continual reading, the input cmd is passed into a unique case clause, perhaps it’s something akin to enumeration? And unique means that there are no overlapping between the matching conditions, so only one block will be triggered in any cases? You are right! Here’s the definition of pc_cmd_t: pc_type.svsee code on GitHub12345package PCType; typedef enum bit [1:0]{ NONE, INC, INC_OFFSET, LOAD } pc_cmd_t /* verilator public */;endpackage : PCType Here we define a enum that occupies a 2 bit wide bit, then aliased it as a pc_cmd_t, where we adhere to the appreciated naming conventions. The whole definition is encapsulated in a package named PCType as I discussed before. Still there are something weird — what is the bit? And why there is a comment /* verilator public */? I am going to talk about the bit thing right now, but for the Verilator thing, till we know what Verilator is and what can it do can we grasp at the idea, so the answer is in the follow-on articles of this series. logic &amp; bit: abundant but systematic built-in datatypeIn addition to the native datatypes directly inherited from Verilog, lots of new datatypes are described and added. Presumably the most crucial subset of these novel datatypes (I think many of them is just excessive abstraction and design and actually not so required but make the language considerably more complex. I’ll back to this point later) is logic and bit. Technically you can regard logic as wire plus reg. Datatype logic wipe out the delimited wire and reg, for synthesizer will deduce the underlying hardware (a wire or a register) automatically, using the context. But if you are declaring a tristate gate like inout, you have to use wire but not logic. Why is that? The reason is logic-typed variables can only have one driver. No surprise here, logic still have four state: 0 (low), 1 (high), X (unknown) and Z (tristate gate high-impedance), but in many cases we can firmly believe that only two state, 0 and 1, will be involved. And that’s what bit used for. It’s a apt datatype for defining enumeration. Actually there are plentiful datatypes newly added into SystemVerilog, and most of them are not mentioned here due to some reasons, and I’ll come to this later. always_XXX: enhanced always clause enable fine-grained elaboration hintMaybe the most complex, sophisticated and perplexing part of Verilog/SystemVerilog is the always clause. Without intensive study, profound understanding and very careful development, unintended latch or flipflop will be deduced with no warnings, which surely is a bad thing. SystemVerilog partially solve this problem by giving you fine-grained elaboration hint. There are three types of new enhanced always clause: always_comb: Next time you write down always @(*), try always_comb! This type of always clause family will automatically listen to all left-side wires and registers in your begin … end block, thus sensitive signal list should not be specified. Simulator and synthesizer will ensure that only combinational logic is deduced, and if not, a warning (or error?) will be thrown. You should not use delayed assignment (&lt;=) in the context as well. always_ff @(...), always_latch @(...): Take their names literally, these two clause is for sequential logic. One will hints simulator and synthesizer to deduce flip-flop, the other will deduces latch. The sensitive signal list is required, and you should specify the sensitive signals in it, exp. always_ff @(posedge clk), just like in Verilog. Silver Bullet?But still, SystemVerilog is not the silver bullet, and here are some downsides. Relatively poor ecosystemBefore you switch to SystemVerilog (which I highly recommend, as many renowned hardware workshops and companies had done so), the very first as well as the most significant thing you should deliberately consider is ecosystem. That is to say, does the synthesizer, implementation program or IDE support SystemVerilog? And if not, apparently SystemVerilog can not be a practical option. The good news is that almost every conceivable mainstream FPGA manufacture provides development environment with bundled SystemVerilog support — but the bad news is SystemVerilog is only supported in their relatively newer version of software. Take Intel and Xilinx as example, only Quartus II 11.1 and above and Vivado v2017.3 and above support SystemVerilog. So if you’re planning to program on old devices, such as a Xilinx Spartan-6, you are not able to use SystemVerilog since Vivado only supports 7 generation FPGA products (Zynq 7000 SoC, Artix-7, Kintex-7 and Virtex-7). Notice that some so-called individual manufacture, in particular Alchitry — the manufacture of the somewhat relatively reputable cheap, newcomer-friendly FPGA development board Mojo, do not provide SystemVerilog in their dedicated IDE as well. SystemVerilog is (overly?) complexAs I mentioned before, SystemVerilog is a complex HDL. But the problem is it’s not just simply complex, it’s somewhat overly and unnecessarily complex. Comparing with Verilog, actually many enhancements are reasonable, adequate and competent, but the other side is there are many features just trying to make coding in SystemVerilog as closer to coding in some high-level language, let’s say C++ and Java, as possible, and this way is just not so great. Many language features and keywords, such as datatypes int, longint, real, crappy multi-thread support, keyword automatic for recursive functions, they are not used in my day-to-day programming, but makes SystemVerilog unreasonably complex — as a HDL, whose theoretical role is just describes wires between hardware structures. I’ll say that this attempt, trying to “disguise” SystemVerilog as a high-level language will indeed improve the testing experience. (Personally speaking the TESTBENCH-based and $display-based testing methodology of Verilog is incredibly inefficient and grueling, I suppose the SystemVerilog way of doing things will be a lot easier) But, I still hold the belief that HDL should be a HDL solely, and high-level language should be a high-level language solely. It’s just redundant, and usually a bad idea to let one side covers the other side, or to “be” the other side. Given the consensus that hardware validation and testing, especially the generation of testcases should be performed in a high-level language, maybe use a high-level language to do such things will be a great idea — and Verilator is created for this. I will cover Verilator and related topics in the next article. After all, this is just a personal preference and personal perspective, and language is just a tool. If it’s too complicated, just pick out the acceptable part: and this is exactly what I’m doing. Use what I called vanilla-SystemVerilog is just stick to the principle that SystemVerilog is nothing but a HDL language, you should only use the HDL part of it, take is as a “better Verilog”, use entirely a handful of features and enhancements including what I mentioned before. Limited featuresEven if your environment fully support SystemVerilog in elaboration, synthesis and implementation, your switch may still not very pleasant as you may expected. Specifically, my Vivado v2019.2 satisfactorily supports SystemVerilog in normal develop procedure, but you can’t add your SystemVerilog modules to your Block Design directly. Overall this is not a big problem, in my case all I need is just to create a wrapper in Verilog then linked IPs to that wrapper, but your mileage may vary. It all depends.Eventually comes the golden rule of selecting things in the realm of techniques, technicians, languages and programmers — “**It all depends.**” As I said, language is nothing but a tool, how to use it and to what extent will you use it in the daily basis, is just personal predilections. Tons of tutorials and blog posts will teach you how to use SystemVerilog as a high-level language and do validation things in such way elegantly — and I bet many people are good at it. But I’m just not on their side, nor am I appreciate their methodology. Hope this article will help you get the basic difference, pros and cons of SystemVerilog, comparing with Verilog, and then decide whether to put it in your own workflow. The next passage will cover another facet of my workflow — Verilator, it lets you simulate and validate your DUT in C++/System C, which is a lot better then do such things in HDL, personally speaking.","link":"/hardware/fpga-journey-1/"},{"title":"有关媒体、社会学、阶级流动、人工智能、还原论、爱情、人类沙文主义和其它一些话题","text":"我有一个非常、非常、非常不好的习惯，那就是喜欢沉浸在深刻、反复的自言自语中，不断地与现实中并不存在的、永远忍受永远包容的倾听者对话。显然这并不实际——并没有能一直忍受我烦人聒噪的慷慨之士。危险之处在于，我自己会经常陷于这样反复的自我对话当中，导致长久持续的失眠，以及更加危险的，一种单调思想的不断反复叠加最终造成极度不理智的言行。 所以昨晚就发生了这样的事情（事实上回家以来这经常发生，令我十分绝望——奇怪的是在学校并不会这样），辗转反侧、自我对话直到四点多彻底睡不着觉，于是起来将自己乱七八糟的思绪记录一二。 这就是这篇文章的由来——事实上我认为理想的形式应该是作为“访谈”，由一位永远忍受永远包容的倾听者记录并编辑，但显然本垃圾并没有这样的社会地位和条件= =。所以，本文是以一种“访谈”，或者说是“随笔”的形式组织并行文的，你应该已经从标题中看出了本文话题的跳跃性——正是如此。 创作本文的动机是作为一种价值观输出。我可能会引用多个领域的各种文献（见文末）以期使读者对我的观念有更好的理解，但我并不了解这些领域中的任何一个，正因如此，我的观点难免片面偏颇；考虑到本文是作为一篇自我陈述而非观点论证组织和行文，关于这一点，还请读者理解。 我一直对有关社会、阶级一类的话题有强烈的兴趣。我阅读的一些著作（比如，布尔迪厄的1700页巨著《世界的苦难》）、文章和资料使我产生了一个逐渐坚定的想法，那就是我认为社会学才是真正关注人们、记录人们的人类努力，其它所有号称立志做到这点的东西，无论是机构、个人还是媒体，不仅根本做不到这点，还在不停做着与这旗号相去甚远、甚至完全相反的事情。如今我们生活在由媒体炮制出的各种事件中，可以说他们所说的就是我们的现实，然而不管是国家媒体、地区媒体还是自媒体，都有明显的价值取向，它们只说在那一个价值观下值得被注意到的事情，而即便它们终于注意到了弱势群体（通常是通过一些震惊世人的话题性悲剧事件……），它们只会以一种完全服从于自身既有价值观念的方式去叙述和报道（即所谓“深度文章”……）。这样的方式的危险性和欺骗性在于，事件的炮制方式和事件的切身经历者们通常是完全无关的——如此炮制出来的事件，常常要不是加重了在既有价值观下的刻板印象（很大程度上构成歧视），要不就是完全偏离实际（问题的现实性在于，要求实地记者在短短几天内作出好几篇长篇累牍的“深度分析文章”，完全不可能期待他们能够真正切实地访谈、分析、研究，于是只能去把一些十年、二十年前一摸一样的刻板印象照搬过来旧事重提）。万维网广泛深刻的流行应该说对这个问题有一定缓解，因为个体、弱势群体的声音能够以一种超越印刷机和电视的更加自由的方式流通（比如你正在读的这篇文章），但是大量同样因万维网的广泛深刻的流行而出现、方兴未艾的所谓自媒体们实际上并未多大程度上跳出完全服务于某一个既定价值观念的目的。BBC、WSJ、端传媒，各种媒体（无论“自”不“自”）装腔作势的自私腔调令人厌烦。不过，读点新闻、经济形势之类倒也确实不会有什么，只是在处理很多社会和政治问题时，媒体的所作所为很难让人满意。 所以，我们有这么一门学科，它和人们站在一起，研究者们有时甚至会用和生命等长的时间去切实地访谈、记录、分析这些细小的声音，那就是社会学。前阵子在推上看到有社会学者在研究同性恋中的形婚群体并诚恳地寻找受访者，我就在想，要让那些媒体（同样地，无论“自”不“自”）关注到（且不说要认认真真地访谈、分析和研究）这么这么细小、且和各种价值观念很难契合的一群弱势群体，得是要花上多少个十年才能轮到…… 关于这一点点问题居然水了这么多我是完全没有料到的，我其实很担心这篇文章到最后会巨长无比以致于被tldr，而这种体例又感觉实在不适合切成几篇文章发。再来说说社会本身。阶级和阶级流动是社会中最为重要、也最令人感兴趣的话题，关于这个，我想说一下自己的见闻和体会。 很早以前在知乎上看到过几个有关阶级流动的非常长的回答（已经退乎很久，出处亦无从考证），其中主要讲了美国著名社会学家Peter Blau创设并执行的一系列的有关社会流动的社会调查（很多内容不大记得了，只有几个关键的点我大概还能确认。我大体上跟这里和这里对照确认了一下自己的记忆，若有疏漏，还请原谅）。这一系列调查“在方法论意义上影响非常深远”，深刻影响了在那以后社会学的基本研究方法。具体来说，这项研究将通常被认为是离散的变量职业连续化了，它的方式是通过海量的问卷调查，收集社会中各个阶层、各个教育水平、各个收入级别的人们对一组职业的评分——这组海量的、连续谱式的评分经过统计学处理，就得到了每一种职业的声望。我们最关心的是在这组职业声望中较高的那些，它们被称作“高声望职业”。 Blau进而提出了一个现在看来非常显然、但仍然极有见地的观察：他说，要看一个社会是否流动，只需要观察父母职业和子女职业的相关性就可以了。社会流动系数被定义为根据父母职业预测子女职业的概率，如果这个概率是1，说明社会（阶级）是完全不流动的；反之则说明社会是完全流动的。这些观察和定义在我看来十分精妙。在这之后，Blau就在美国执行了一系列大规模、广泛的社会调查，希望得到美国的社会流动系数。具体的结果是多少我记不太清楚了，但是大概是 0.7+ 的一个数值；父母的职业居然能以远远超过一半的概率“遗传”给子女，这在我看来是十分令人震惊的事情。但是我觉得这还不是最为重要（所以才记不太清楚了嘛）的发现，最为有意思的发现是研究中途得到的两点结论： 第一点，我们想知道，父母从事高声望职业，子女也从事高声望职业的概率有多大。特别地，我们关注，父母从事高声望职业，子女也从事高声望职业的概率比一般人要高多少。我想结果可能出乎很多人意料，研究表明，如果父母从事的是高声望职业，那么子女从事高声望职业的概率要比人群中的概率高出十一倍。在我看来这个值难以相信，读文章读到这里的时候我内心的猜测是最多最多最多也就是个五六倍的影响吧，结果却是我这个五六倍上再往上翻了个倍。关于这个概率具体是多少可能也会很有意思，这个概率事实上统计学地表明了一代之内阶级滑坡发生的概率有多低，也同样表明了一代之内，仅靠个人努力能够达到的阶级提升跟家庭环境的直接作用比起来是一个多么些微的数量。 再来看第二点，事实上我个人感觉第二点还要更加有意思：我们还想知道，如果反过来看，父母不从事高声望职业，而子女从事高声望职业的概率又有多大？我想这个意思就很明确了，我们是在说一代翻身的概率，或者某种程度上即是寒门出贵子的概率。然而令人惊讶的是，研究表明这概率是…… 0。统计学上我们得到的结论是一代之内不可能翻身，或者说，对于小概率事件，我们认为它在一次试验中不可能发生。 综合来看，这项研究很好地回答了一些问题，那就是社会流动的滚雪球现实——社会流动是个长期的积累，是一个好几代人在职业声望表上一点点向上爬的漫长路线。很难有不进反退的悲哀，也罕有一步达成的奇迹。 最后再来看看这个声望表本身。同样具体的我也记不清了，在美国前三的大概有大学教授、律师还有一个别的什么；而在中国大概是大学教授、官员还有一个别的什么；看得出来官员在中国的地位明显比在美国的要高很多。另外还有一点有意思的就是，千禧年后英国好像又做了一次大规模的职业声望调查，结果和半个世纪前的结果居然没差多少。（前边提到的Blau的研究的主要成果是1967年出版的 The American Occupational Structure，《美国职业结构》） 你可能会想知道这样的观察在国内又是什么情况。我看过一些分析性（而不是实证性）的文字，大意是说在国内由于教育资源（尤其是高等教育资源）的严重不平衡再加上户口制度、官员的高声望和福利制度的缺乏，社会流动的情况大概只会更差。不过发展中国家的社会是不是一般就不如发达国家的流动呢？这其实也是一个很有意思的问题。 然而，这些研究没有回答的问题其实更加关键，那就是——为什么会这样？为什么一代翻身就这么难？为什么社会不能更加流动？如何才能让社会更加流动？怎样才能让社会有更多一代翻身的奇迹？我看到的是，或者说我的臆测是，当代科学，“精密科学”，在这一类重要的人文、以及人文交界边缘的问题上表现出令人尴尬的茫然无措。这样的问题还有：什么是成功？如何缔造幸福的人生？意识是什么？如何构造通用人工智能？认知的极限在哪里？科学能够帮助我们最终达到全知吗？爱情是什么？为什么我们会被一些人吸引、而又排斥另一些人？意识的物质基础是什么？爱情的物质基础又是什么？ 我想先说说很早读过的一篇很棒的essay，题为 Why general artificial intelligence will not be realized，作为article发表在Nature旗下的OA期刊 Humanities &amp; Social Sciences Communications 上。文章的大体思路是，通过引述大量哲学上的分析（比如维特根斯坦、Hubert Dreyfus），再配合对现实中通用人工智能令人尴尬的“进展”（IBM Watson 的失败、AlphaGo “lacks flexibility, and is not able to adapt to changes in the environment. It has even turned out to be vulnerable to tiny changes. Beacuse …, deep reinforcement learning has so far found few commercial applications. Research and development is costly, but DeepMind’s losses of 154 million dollars in 2016, 341 million in 2017, and 572 million in 2018 are hardly a sign of success.”、华盛顿大学一个非常有名的以构建哈士奇犬 - 狼分类系统来说明缺乏解释性的神经网络最后会得出多么令人啼笑皆非的结果、人工智能对话系统 Mitsuku 极其拙劣的对话水平）的描述，得出通用人工智能或不可行的结论。文章中最为有趣的一个分析在于，文章提到，这样的一种思潮、“对机器能够做到什么的严重高估，以及随之而来的对人类、自然和进化之丰功伟绩的严重低估”，是源于一种牛顿主义。牛顿物理学不可否认的极大成功完全重塑了17世纪以来的亚里士多德式的“常识物理学”，将物理学、甚至是（由于这样的物理学的极大成功）世界本身抛入了数的、理型的、计算的范畴。人们开始相信，世界的本质是计算的，世界的本质是算法的，只要我能够知道当前世界上每一个原子的状态，再套用这一个“世界算法”，我就能够预知未来的任何一刻（我第一次听到这种说法甚至是很早很早很早以前在美剧《陨落星辰》中）。将这套哲学搬到生命体中，那就是在说，意识本身也必定是算法的，意识只不过是一堆神经元的互相连接，只不过是一堆电信号在一套算法控制下的不断传导（相信这一套的人们有一个非常时髦的哲学标签，叫“取消物质主义者”）。这样的只不过随处可见——宇宙只不过是粒子的规律运动，爱情只不过是化学物质的复杂作用，意识只不过是神经元的互相连接。 关于这一点为何如此，以及后果是什么，必须要提到科学史上的不朽名篇——亚历山大·科瓦雷的《牛顿综合的意义》，这篇文章作为序言收录在商务印书馆2016年出版的《牛顿研究》中。文章中说到： 我总是说，近代科学打破了天与地的界限，把宇宙统一成了一个整体，这是正确的。然而我也说过，这样做是付出了一定代价的，即把一个我们生活、相爱并且消亡于其中的质的可感世界，替换成了一个量的、几何实体化了的世界，在这个世界里，任何一样事物都有自己的位置，唯独人失去了它。于是科学的世界——真实的世界——变得与生活世界疏离了，最终则与之完全分开，那个世界是科学所无法解释的——甚至称之为“主观”也无法将其解释过去。 的确，这两个世界每天都——甚至是越来越——被实践（Praxis）连接着，然而在理论上，它们却为一条深渊所隔断。 两个世界：这意味着两种真理。或者根本没有真理。 这就是近代思想的悲剧所在，它“解决了宇宙之谜”，却只是代之以另一个谜：近代心灵本身之谜。 这段话我非常喜欢，高中时一度能反复背诵。（就和柳鸣九先生翻译的《局外人》的最后一段一样） 我们看到的是，这样一种经常出现的只不过，是一种脱胎自牛顿物理学的核心思想——它缘起于18世纪以《原理》为代表的牛顿哲学的广泛流行，最终渗透进现代科学、进而渗透进现代生活的每一个角落——它有一个名字，叫做还原论，或者说是还原主义。（我个人粗浅且不负责任的理解，是将还原论、结构主义等这些倾向理解为同义词） 雨后为什么有清新的气味？因为产生了臭氧，而臭氧令人精神振奋。为什么撸猫会感觉很爽？因为进化使人类具有“怜幼”这一机制，而这会促进大脑中多巴胺等递质的分泌。爱情从而而来？来自苯乙胺、肾上腺素、多巴胺、血清素和催产素等一系列化学物质。 企图在一切现象上寻找物质的、粒子的、可计算的解释的这种倾向，将一个现象不断还原至更本源的层次，不到物质的、粒子的层次誓不罢休——这样的还原论如今甚嚣尘上。随便搜搜，你就能看到大堆大堆的诸如 “爱情激素”、“快乐递质” 的文章，这是牛顿主义在当代生活无情投射的表征。 这样的思潮带来的一个自然而然的想法和后果，就是人类沙文主义，或者说科学沙文主义：科学能够帮助人类达到全能全知，科学和人类最终能够解决一切问题。我对这样的想法最为深切的体会是20年年中在深圳（当晚还和e哥面基了），午后和学长散步到深圳湾，坐在广场前的台阶上吹着海风，看着温和的阳光透过清澄透亮的空气照射在波光粼粼的海面和悠闲自在地散步和骑车的人们身上，那时我忽然对学长说，如果巴黎协定没有达成，20、50年后这里将不复存在，深圳会变成一片沼泽，人类将在仅剩的高地聚居地苟延残喘。当时学长非常直截了断地打断了我，他指了指深圳湾联通大海的那个豁口，比划了一下说，我们会在那里建一座大坝，冲毁一切的海水将被挡在外边，科技会帮助我们控制内外水体的高度差，人们将继续安居乐业。 这是我第一次经历这样的观念在现实生活中的切实体现。坦白地说，我是科学的忠实信徒——我以前是《环球科学》的常年订户，如今则经常关注 Nature 自然科研 等公众号的推文。但是，对于这个问题，我有着更加人文、或者说有些矛盾的观点：我不认为还原论能够一直帮助人类，我不认为科学能够最终达到全知的境界，我不认为科学+人类=上帝，我不认为我们最终能够靠科学解决一切苦难。我不认为科学是人类的归宿。 从这个角度上来说，我相信自然和进化的力量，它们理应得到比如今高得多得多的尊重和敬畏。我感叹那些在大地上硬生生劈下河流裂谷、挤出山丘高原的地质作用——它们远远、远远、远远地超出一个个体生命的长度，也远非以人类的意志为转移；我惊叹于上亿年进化和自然选择的丰功伟绩，它使我能够写下这篇文章，并且——近乎魔法般地——使这篇文章出自一块像豆腐一样的三磅重的器官，这个器官比节能灯还要节能，却能够产生意识，让我们感受到生命的存在。 从这个角度上来说，这些年来阅读科幻文学作品（尤其是认知论科幻和新浪潮科幻——它们通常带有对科学沙文主义的反思）和人道主义文学以及诗歌的经历或许终于使我理解了两年前高三语文老师在课堂末尾说的 科学不能救人，科学弊大于利 是在说什么。当时我指责她，你不能一面享受科学带来的诸多利好——节能灯、建筑和抗生素——一面对科学大放厥词。 而现在，我想的是 如果人类要有一个归宿，那应该是自然。 我独自漫游，像山谷上空悠然飘过的一朵云霓，蓦然举目，我望见一丛金黄的水仙，缤纷茂密；在湖水之滨，树阴之下，正随风摇曳，舞姿潇洒。 连绵密布，似繁星万点在银河上下闪烁明灭，这一片水仙，沿着湖湾排成延续无尽的行列；一眼便瞥见万朵千株，摇颤着花冠，轻盈飘舞。 湖面的涟漪也迎风起舞，水仙的欢悦却胜似涟漪；有了这样愉快的伴侣，诗人怎能不心旷神怡！我凝望多时，却未曾想到这美景给了我怎样的珍宝： 从此，每当我倚榻而卧，或情怀抑郁，或心境茫然，水仙呵，便在心目中闪烁——那是我孤寂时分的乐园；我的心灵便欢情洋溢，和水仙一道舞踊不息。 ——《水仙》，威廉·华兹华斯 &lt;全文完&gt; 笔者并不精通文中提到的任何一个学科，诸如社会学、哲学、科学史等。正是由于笔者视野狭隘且懒惰成性，对于任何一个方向都不肯努力钻研，文中观点难免片面偏颇。考虑到本文是作为一篇自我陈述而非观点论证组织和行文，关于这一点，还请读者理解。 主要引述来源本文中的大部分知识性和人文性内容来自个人大量散漫、无章法、偶然的阅读，以下列出一些仍能考证的来源，并强烈推荐感兴趣的读者前去阅读这些材料： Blau, P. M., &amp; Duncan, O. D. (1967). The American occupational structure. Fjelland, R. (2020). Why general artificial intelligence will not be realized. Humanities and Social Sciences Communications, 7(1), 1-9. 《牛顿研究》，亚历山大·科瓦雷。商务印书馆2016年版，《科学史译丛》系列。https://www.cp.com.cn/book/72a7bc67-2.html 说真的，要说到什么出版之类的东西，国内真就只有商务印书馆能做到尽善尽美的程度…… 这套商务印书馆出版的《科学史译丛》是我自从识字以来所读过的所有出版物中质量最好、唯一能真正堪称完美的。无论是装帧、纸质、印刷、翻译、校对、各种页码和标记都极其完美。真的很敬佩商务印书馆能如此认真地对待文字出版工作。 《牛顿综合的意义》，亚历山大·科瓦雷。这篇文章是《牛顿研究》的序言，是科学史领域最为著名的文章之一，强烈推荐阅读。 《新物理学的诞生》，伯纳德·科恩。商务印书馆2016年版，《科学史译丛》系列。https://www.cp.com.cn/book/49aa93d4-e.html 《环球科学》2018年7月号，《六个最重要的科学问题》 《环球科学》2014年7月号，《自主意识不存在？》 《科学的价值》，理查德·费曼。收录于费曼的自传《你好，我是费曼》，南海出版公司2016年版。 《我们谈论了这么久的科幻到底是什么？》机核GADIO播客，2018-06-25。https://www.gcores.com/radios/102374 《科幻世界》2020年5月号，《三位科幻作家的“三体对话”》 埃德蒙·胡塞尔。https://zh.wikipedia.org/wiki/%E5%9F%83%E5%BE%B7%E8%92%99%E5%BE%B7%C2%B7%E8%83%A1%E5%A1%9E%E7%88%BE 《索拉里斯星》，斯坦尼斯拉夫·莱姆。 《与拉玛相会》，亚瑟·查理斯·克拉克。 《水仙》，威廉·华兹华斯。https://www.britishlibrary.cn/zh-cn/works/i-wandered-lonely-as-a-cloud/","link":"/life/me-and-the-world/"},{"title":"[译] 病毒学家内森·拉尔夫：我无比期待“最后一场瘟疫”","text":"本文是一篇旧文。最早是作为知乎的独立文章发出去的——果然没什么人感兴趣，这么久以来，现在咱也算是半退乎了。最近刚好又在选译、纯手译一篇巨震惊的文章（各位敬请期待），于是想着把以前这篇稍微改改放上来算了，估计反正也不会有人看的。 好吧，就这样。以下是旧文章内容。 本篇文章是刊登在非盈利机构 edge.org 上的英文访谈辑要的翻译。原文地址：WAITING FOR “THE FINAL PLAGUE” - edge.org。翻译经 Edge.org 编辑 Russell Weinberger 授权。 读完全文，我们不禁思考这样一个问题：如果这样一个世界，一个科学家有大得多的话语权的世界，一个人们都按如今科学家一而再再而三地呼吁、但又总是被一而再再而三地忽略的那些“应该”行事的世界，如果真的实现了，如果人们真的能活在那样的世界、那样的社会里，究竟是一幅什么景象？ 除了对这一次疫情的反思，我们还应当看到：不管情愿与否，我们都已经迎来了二十一世纪的第三个十年。在这个谣言横行、反智主义高涨的当今世界，在这个科学界早已定论的气候变暖都还被不断质疑、反疫苗运动声势浩大的当今世界，我们，普通民众、科学家、科普作家、政治家、所有人类，到底应该做些什么，才能建构更加美好的社会，才能避免人类自作自受的灭亡结局？ 以下是全文。其中“编者按”系原编者所加，“关于被采访者内森·沃尔夫” 请见文末。 【编者按】2009年一月，我在洛杉矶和病毒学家 Nathan Wolfe 就他关于病毒如何出现的生物学研究进行了一次深入广泛的讨论。在短短几个月内，2009年近乎全年持续爆发的 H1N1 猪流感病毒流行引起了世界范围内的恐慌。数月后，在《如何预防一次大流行》（本文未翻译，将跳转至 Edge.org 上原文。——译者注）这篇文章中，他写道： 这一次的猪流感爆发乍一看似乎是毫无预警地突然发生，在被注意到的数日内，就已经蔓延到了无法控制的地步。然而，这次爆发背后的病毒在被发现之前就已经存在好一阵了，莫非我们做不到更早检测、更早行动，抢在它如此大范围地蔓延之前就控制住它吗？答案似乎是否定的——如果我们一直密切关注可能导致新病毒出现的人-动物间相互作用的话，如此大范围的爆发，或许就不会发生。 尽管人们对这样一场大流行（pandemic）如何爆发仍知之甚少，对这种微生物，我们却相当熟悉：和SARS（严重急性呼吸系统综合征）、流感和HIV（人类免疫缺陷病毒）一样，它们都有大范围传播的风险。我们知道它们通常来自动物，特别是世界上一些特定地区的动物：比如刚果盆地和东南亚。 通过监测在这些病毒“热点区域”内接触动物的人们，我们能够在病毒进入人类种群的那一刻就捕获病毒，从而发展出预测、甚至可能是预防大流行的能力。 不幸的是，那次有11年历史的交谈，与今天更息息相关。以下我们与 Nathan Wolfe 再次讨论这一议题。 内森·拉尔夫：我无比期待“最后一场瘟疫”通常意义上讲，我感兴趣的，很大程度上是一个与我们自己的宇宙平行的生物宇宙，这个宇宙由各种微生物组成。我特别感兴趣的是病毒，但也有细菌（令人着迷的生物）和一系列寄生虫。 历史上，这些生物和我们一道出现，和我们共处共存，但却是栖息于一个截然不同的世界中：他们也会响应那些和我们也要相应的、完全相同的诸多压力，只是时间跨度要短得多；当然，它们也服从自然选择。对我们的星球而言，对作为这个星球上一个物种的我们而言，它们极其重要，然而事实却是我们对它们知之甚少。当下的情形其实相当有趣，考虑到我们当前拥有的技术，我将列举一些通过分子生物学得来的事实。 譬如说，我们掌握的宏基因组学（metagenomic）技术，可以让我们只需一滴水或一滴血浆，就能知道这些存在于这些液体、固体、土壤或粪便，或者是唾液中存在的核酸和生物的惊人多样性，无论你打算做什么。 对于一位生物学家来说，现在是一个迷人的时间点，因为我们不再需要培养这些生物中的每一种来鉴别它。我们可以更简单地理解这些微生物的遗传特性，这使得我们有了这样一种幸运：我们有幸回到过去，成为自然历史学家，去探索这些我们知之甚少的微生物的多样性。 这就是我的兴趣所在：我确实仅仅只是一位生物学家和一位自然历史学家，碰巧主要对微生物感兴趣——但是是在人类演化、哺乳动物多样性和生物地理学的语境下。我认为现在是一个美妙的时间节点，我们真的有幸回到过去，去探寻那些基本的发现。我们一直在发现新型的病毒——你不能“一直”发现新的灵长类动物，因为我们已经发现了其中的大多数，但对病毒来说绝非如此。 很明显，人们对有害的病毒有着极大的兴趣。我想指出的其中一点，也是首要的一点，那就是病毒有着如此之多的多样性：它们中大多数或许是中性的，它们中不少有重要的生态学意义，它们中有一些确实对它们的宿主有害。如前所述，人们对产生负面影响的病毒和微生物兴趣盎然，譬如能够导致1918年流感大流行（1918 flu pandemic，指的是1918年1月至1920年12月间爆发的全球性甲型H1N1流感疫情。这次大流行共造成5亿人感染、5千万到1亿人死亡，是人类历史上最致命的自然事件之一。——译者注）的病毒还有HIV病毒——SARS病毒也能够引发那样的大流行。这些都是有可能相对迅速地对人类人口造成破坏性影响的因素。 通常而言，看看全球范围内的疾病控制，你会发现其中的大多数都不由生物学家实施、亦非在科学的领域内施行，而实际上是以一种应用科学和医学的方式。公共卫生科学，实际上就是疾病控制：它等待着一次大流行的发生，然后尽一切所能竭尽全力地尝试控制住它。 但是，我们在分析那些重要的传染性疾病的过程中发现的一个事实就是，这些疾病大多都来源于动物。几乎所有这些重要疾病最初都是动物疾病，它们由于各种原因，经水、蚊子、血液，由猎人传染给人类。他们暴露于这些媒介，这些不断冒出病原体的媒介，那些暴露于这些媒介的个体，是恒常的桥梁，是病毒的桥梁。 这些事情大部分都不会有结果。在这些个体身上，它们几乎瞬间就会灭绝。即便它们开始在人与人之间传播，也就是开始具有潜在的重要性和危险性的时候，它们中的大部分也会灭绝，在当地人群中消亡殆尽。必须具备恰到好处的条件，才能有效地跳出当地人群——在这一点上，这些媒介并不完全适应人体——那些病毒之所以能够引发大流行，大都因为跨过了这一步。 然而，全球范围内的疾病控制只集中在极少数达到金字塔顶端但已在全球范围内传播的病毒上。想想HIV，1981年，就在加州大学洛杉矶分校（UCLA）的这条街上，第一批艾滋病病例被确定为一种综合征。但是，据估计，同年全球至少有十万人已经感染了艾滋病病毒，甚至可能不止十万。 所以，这已经错过了一个关键时期，一个本可以真正解决这一大流行病的关键时期。到那时，到1981年，已经为时已晚。毋庸置疑，这是一种非洲疾病，一种不知怎地传播到了加州大学洛杉矶分校医学中心（UCLA Medical Center）的人们身上的非洲病毒。那时甚至花了三年时间才找出导致艾滋病的病原体（HIV），美国总统花了七年时间才能够使用“艾滋病（AIDS）”一词。 现在，我要设想一个略微不同的场景。比方说，我们一直在更全面地研究人类和动物之间的这种相互作用，并试图主动地预测这些大流行病，我们就会知道中非存在一种被忽视的病毒；我们就会知道它在非洲通过千百种不同的途径传播，最常见的是通过异性性行为；我们就有可能诊断到：这将会是一场被忽视的热带疾病。当疫情真正发作的时候，比如就在这里，就在美国，我们将拥有巨大的领先优势。 钱生钱，利生利——这就是它的益处：就最终结果而言，每个月、每一年我们得到的这些流行病的早期预警，都有着巨大的收益。我们进入全球性流行的时代已经30年了——其实还不止，如果你从这些病毒真正传给人类开始算起的话，那大概是20世纪早期的某个时候。50或100年后，当人们回望这段历史，当人们回望当下这段历史，他们会发现某种程度上我们现在所做的，就是我们在50、60年代治疗心脏病时所做的：我们没有预防它，我们不是在测量胆固醇水平，我们不是在测量血压并控制吸烟，我们实际上是在等待一次心脏病发作。我们在等待一次全球性大流行，等待全球性大流行发作。 这样一种说我们本可以在预测和预防大流行上做得好得多的想法无疑是大胆的，但真正大胆的想法是，我们或许能到达这样一个临界点——遥远未来的一个临界点——在这个临界点上，我们是如此擅长预测和预防流行病，以至于出现了“最后的瘟疫”；我们能够捕获如此之多的病毒，以至于新的大流行变得相当奇怪：这是我们当然应有的一个理想。如果你问问从业于公共卫生领域的人们，他们甚至都不会想我们能够预防艾滋病，更别说我们能否到达一个临界点，再也没有任何瘟疫，亦无需总想着根除某种流行病。 根除，在今日的公共卫生领域只是理想。显然我们有疫苗：我不能坐在这里，作为一位病毒学家，对疫苗或根除病毒大放厥词。但是，另一方面这些都是非常被动的回应，无疑它们比感染后治疗更高效，但也比首先预防瘟疫发生要低效得多。 我正在寻求大量资源，用来在世界各地建立监测站，去真正监测那些高度暴露于野生动物个体，以发现这些病毒的桥梁，这些从动物到人类的病原体的活动，并通过它们来知道，首先，那里出现了什么。 这些正在流通的病原体具有怎样的多样性？你可以认为这是一种病毒群系、或微生物群系的多样性。那么，当下就在人类、和我们与之接触的动物中的微生物，又有着怎样的多样性？ 我们需要列一个清单，这样我们未来发现它们的时候，我们就能知道它们是什么。其次，当它们试图进入我们的空间的时候，我们能有预防系统，以便能捕获它们。这是一项特别昂贵的工作，但是，无论我们花费了多少，我们所做的，捕获的每一个病毒，都是整个系统立即产生的回报。对非典病毒来说，实际上最终也只约有1500到2000个个体感染，即使是这样一场流产的大流行，也会产生，据估计，数十亿美元的经济影响。这仅仅是一次短暂的、流产的大流行。确实，我的工作就是为了达到“最后的瘟疫”。 我达到这“最后的瘟疫”的方式就是，研究大流行是如何产生、如何消亡的；研究我们应该如何做，才能预测和预防这些大流行？ 在某种程度上，“最后的瘟疫”只是一种理想。回顾20世纪，你会发现那时、现在、未来，都有一座恒常的桥梁：每次走在威尼斯的海滩上，你都会看到有人在舔他们的狗（？）。我不是在说这是一种危险行为，但是这的确在交换微生物，这种交换不断地发生。微生物在个体和个体间持续转移，在物种内和物种间持续转移。 如前所述，这种交换中大多都不重要。但是，仍然，回顾20世纪，那时有一些病原体，其中的很多从未被捕获，它们就有着这种转移：从动物到人类，在世界范围内传播。这些病原体中有一些或许从未引发过可怕的疾病；还有一些或许和其它已知的疾病弄混，错认为就是它们；现在有一种全新的疟疾正在亚洲西南部蔓延，这是一种猕猴的疟疾，一种亚洲猴子的疟疾，被称为猴疟虫。 当公共卫生领域的人们真正诊断疟疾时，他们在显微镜下观察它们，并被迫将它们称作是人类四大寄生虫之一的寄生虫，所以这一切都被误诊了。你没法知道事实，除非你回过头来仔细研究。瞧，猴疟虫正在扩散，而且它刚刚被鉴定为另一种寄生虫，它是一种致命的动物疟疾寄生虫。 我甚至没法告诉你整个20世纪发生了多少次大流行，但是肯定不少。重点是，如果我们颇为擅长诊断这些病原体，我们可能就永远不会关注那些不引起疾病的微生物。比方说，每三到五个人中就有一个感染了一种叫做GBV（庚型肝炎）的病毒，这是一种传染性极高的病毒，但它不怎么会引发疾病，也许患病率稍低一些。但不管它是什么，它都是一种大流行病毒。谁在乎呢？ 有趣的是，在未来，这种病毒可能会具有某种重要性，但实际上，归根结底，我们只感兴趣那些会引发疾病的微生物。如果我们一开始就能够更好地预测和预防流行病，而不是仅仅专注于控制它们，那么随着时间的推移，新型流行病的发病率将逐世纪下降。我没有说我们能够轻松解决——“挺好，这就是最后一次瘟疫了”——但我们的目标绝不仅仅是根除业已存在的疾病，而且还应是根除那些还未出现的新型疾病。要达成这个目标还需要很长的时间，但我们也要改变我们的观念，视根除还未出现的新型疾病为目标，根除现有疾病，不应再是终极目标。 如果你想了解我的工作，一种方法是把我想作一个微生物收藏馆的馆长。我有些藏品颇丰的储藏库，我的专注于收集各种有趣微生物的站点遍及世界各地，我和各种不同的小组合作。我没有仔细查看我的收藏，而是将这些标本寄给那些我认为可能会对此感兴趣的研究者，他们研究这些标本以发现新的病原体。说真的，这挺像一个微生物博物馆。因此，我没在美国怎么待过。我的办公室比你的套房大不了多少，不怎么大，尽管我的事业维持起来非常昂贵，但对我来说四处走动没什么难的。 其实我并不亲自完成所有的实验室活儿。我所做的，更多是在世界范围内寻找专家，他们要不使用一些技术鉴别新型病原体，比如 Forest Rohwer（美国病毒学家，主要研究珊瑚礁微生物和病毒。——译者注，下同）、Joe Derisi（Joseph DeRisi，美国生物化学家，主要研究分子生物学、病毒学和计算生物学）和 Eric Delwart（美国病毒学家，主要研究分子病毒学、病毒进化和发病机理），要不研究特定的病原体种群，比如世界上最好的黄病毒学家（黄病毒科，该科共分为四个属，主要感染哺乳类动物），或者是分子寄生物学家。除了我在世界各地的田野实验室之外，我还有12个合作实验室，每个实验室都会收到我寄出的标本。 我的工作和艾滋病疫苗的研发形成了一种鲜明对比。HIV被发现时，卫生与公共服务部长（Secretary of Health and Human Services）口口声声地向我们承诺，一年内就会有针对HIV的疫苗。现在已经是三十年后了，不少组织已在研制艾滋病疫苗上花费了数十亿美元，这项投资的益处值得怀疑。 长话短说，研制疫苗真的很难。简单的疫苗事实上并不由人们研制，而只是被人们发现。牛痘，即天花疫苗：我们并没有对它做什么技术上的处理。我们今天所做的并不比当时巴斯德所做的复杂多少，仅仅是取一些牛痘病毒，取一点点，注射进手臂里。牛痘病毒和天花病毒密切相关，若一个人被这种病毒感染，就能产生抵抗下一次感染的免疫力。 我的事业之起步，是从我进入哈佛大学，师从于 Marc Hauser（Marc D. Hauser，美国进化生物学家，主要研究灵长类动物行为、动物认知和人类行为）和 Richard Wrangham（Richard Walter Wrangham，英国灵长类动物学家，主要研究猿的行为和人类进化）开始的，我是前者的第一位博士生。随后我对意识的演化产生了兴趣，进化使我着迷；高中时我就读了道金斯的《自私的基因》，并被其深深吸引，老实说这本书或许是我对生物学着迷的原因之一。我是带着对进化论和生态学的兴趣而非对机理（mechanism，致病机理？）的兴趣来研究的。我并不专注于机理，尽管有些时候我也要使用这些工具或者思索机理。 我在哈佛大学学习人类生物学。我开始和 Richard 一起工作，研究黑猩猩的自我治疗行为。Richard 鼓励我去了解黑猩猩可能在治疗什么，所以我开始思考什么是病毒，黑猩猩身上有什么微生物，它们可能因为这些微生物而吃植物。然后我就走上了这条道路，再也没有回头。 那时，我对阅读和思考意识的演变感到沮丧。我觉得这是一个飘忽不定的目标：人们一说“好吧，我们在这个物种身上找到了证据”，进度条就会发生变化…… 我离开了这个领域。这样的、让我捕捉到领域内令我感兴趣的问题的方法使我感到沮丧。随后是病毒——它们令人着迷，它们进化迅速。 我研究病毒是因为我研究黑猩猩的自我治疗行为，我开始研究黑猩猩的病毒。这是个非常有趣的故事，一个非常有趣的、关于艾滋病毒起源的故事，一个令人着迷的故事——那一刻它充满生机和活力，只是它还没有被完全理解。 不少人已经接近HIV的起源，但还没有真正理解它，甚至疟原虫也是如此。那时我开始对疟疾的起源感兴趣，为何这样一个对人口如此重要的生物，为何我们能对作为一种生物的疟原虫那错综复杂、令人痛苦的发展进程了解得如此透彻，但又对其来源几乎一无所知？ 我相信，这部分上是NIH（美国国立卫生研究院）一样的组织内的实验室科学中偏见的结果：这样的组织对重大问题不感兴趣。他们只感兴趣细小的问题。不过这并不是说若有良好的科学政策，这些对细小问题的兴趣有什么不妥。 对于我的工作，我乐于将这些对大流行病的研究当作是生物学的一个子集。我所关心的并不是学科界限，而是我需要生物学家来解决它。医师的偏见是很重的：医师似乎很可能是认为所有的病毒都是负面的那类人。如果整个领域在朝正确的方向发展，那么一个20年后、或者50年后的优秀病毒学家，就会像爬行动物学家一样，像一些研究蛇的人们一样，清楚地知道或许公众对毒蛇最感兴趣，但绝不自欺欺人地认为毒蛇在蛇类中占比显著，而且在分类群中有什么特别的重要性。这些都是自欺欺人的想法。 这另一种类的各类生物，病毒，它们有着重要的生态学意义，它们是迷人的生物。我们之所以会把病毒想作十恶不赦、百害而无一利的东西，是因为医师们都在盲人摸象：如果你专找负面的病毒，你当然就只能找到它们。医师们价值无穷、功德无量，但通常是在一些特定语境下。我们研究的是生物学现象，让生物学家来研究自然是再合适不过了。 我将对你坦诚相告：我会顺着我的才智漂流，并试图专注于发现我感兴趣的事物。不论出于何种原因，我现在对阻止下一场疟疾肆虐和理解疟疾从何而来更有兴趣；我并不专注于根除疟疾：有很多人在这么做，而且若想精通也是门大学问，只是我对此不感兴趣。 关于内森·沃尔夫：内森·沃尔夫（Nathan Wolfe）是斯坦福大学 Lorry I. Lokey 人类生物学客座教授，负责领导全球病毒预测计划。他主要通过结合分子病毒学、生态学、进化生物学和人类学方法，研究病毒出现的生物学。他曾被授予久负盛名的NIH先驱奖（NIH Director’s Pioneer Award）并被任命为世界经济论坛全球青年领袖（World Economic Forum’s Young Global Leaders）。他还名列《大众科学》评选的 “杰出十人”（Brilliant 10）和《滚石》杂志的 “百强变革推动者”（Top 100 Agents of Change），并且是《科学美国人》杂志编辑委员会和DARPA国防科学研究委员会成员。 以上是全部译文。文章中大部分“译者注”引自维基百科。文末”关于内森·拉尔夫“部分译自 Edge.org 原文，部分引自维基百科。 翻译：Ray Eldath，转载请注明。译者才疏学浅，对翻译亦不精通，若有错漏之处，还请不吝赐教。 safe harbor：文章不代表译者观点。若有翻译相关问题欢迎指正，但译者对原文观点不负责任。","link":"/science/nathan-wolfe/"},{"title":"从 SML 到 Scala：简单考察 typeclass 范式的演变和各种实现，以及🎉🎉🎉","text":"本文是一篇「小作品」 这次要是还写巨长我就吃了渚薰（（（（大雾） Typeclass 范式是对于 表达式问题 Expression Problem 的一个重要的解。在我了解的编程语言范式中，个人认为，typeclass 范式是较为优雅的一个。本文将简要考察这一范式本身，以及更加重要的：它在各种编程语言中到底如何落地。具体而言，本文将在各种落地语言中构造同一个示例：一个类似 Ruby 中的 Comparable mixin，或者 Java 中的 Comparable 接口，并且演示这些结构如何对既有的类型同样具备可扩展性。 阅读本文需要一定的代码基础，尤其是对 typeclass 范式的认识和相关的编码经验。本文并不会对文中的举例作详尽解释。 表达式问题 Expression Problem先来简单说说表达式问题。表达式问题是编程语言设计中的一个重要问题，它非常直接地与我们日常的编程工作联系起来——这也是其之所以重要的一大原因。这一问题最早是由 Philip Wadler（是的是的，就是那位 Mr.λ wwwwww，不知道他的这点轶事的朋友可以去油管上看看他的 talk Propositions as Types（话说我最早是看 Facebook 的一个介绍 Haskell 在他们内部大规模生产级落地的 talk 知道这位 Mr.λ 的，那个 talk 也相当不错，大家也可以去看看~））在讨论 Generic Java（好像是 Oracle 给 Java 泛型这块设计的项目取的代号）的设计时提出的。表达式问题提出的背景是使用一门编程语言提供的表达能力来表达一个表达式系统（Expr），这个系统需要具有可扩展能力（这正是名字中 表达式 的来源）。简单来说，表达式问题考察：一个语言如何支持扩展一个既有的类型（datatype），常见的操作是，向这个类型增添子类型（case），或者向所有的类型增添操作（通常以方法的形式）。 将这个统领表达式的类型（Expr），按所有的子类型（case）和所有的操作（operations）两个维度分别列全，就可以得到一张表，这张表格的行即子类型列即操作。广义来讲，这张表格很好地表明了函数式编程 Functional Programming, FP 和 面向对象编程 Object-Oriented Programming, OOP 之间的完全对立甚至是正交——一个偏重行（即子类型）的可扩展性，一个偏重列（即操作，通常是方法或函数）的可扩展性（当然，前提是你要同意，Java 不代表 OOP，而 FP 和范畴论、Monad、Functor 等各种有用没用的概念并没有什么关系）。 这可能是本文（或者是本博客？）所有文字中最重要的一句废话： Java 不代表——至少不完全代表——OOP，而 FP 和范畴论、Monad、Functor 等各种有用没用的概念其实并没有什么关系。 具体见文末 “主要引述来源”。 Typeclass in SML: Module SystemML 族语言自 1970 年代，LCF 定理证明器（theorem prover）的元语言（Meta Language）演化而来。SML（Standard ML）以及 ML 族语言，作为 严格求值（strict evaluation）、静态类型的函数式语言的典例，启发了大量语言的设计，并对编程语言的形式化定义和验证等研究方向做出了重要贡献。 SML 的 模块系统 Module System 为语言细节的隐藏提供了强大的工具（SML 的模块其实很有意思，比较值得学习研究），它或许是历史上第一个提出（并实现）这一范式的编程语言： typeclass.sml12345678910111213141516171819202122232425signature COMPARABLE = sig type elem val compare: elem -&gt; elem -&gt; intendfunctor Ord (X: COMPARABLE) : sig val le: X.elem -&gt; X.elem -&gt; bool val eq: X.elem -&gt; X.elem -&gt; bool val ge: X.elem -&gt; X.elem -&gt; boolend = struct fun le x y = X.compare x y &lt;= 0 fun eq x y = X.compare x y = 0 fun ge x y = X.compare x y &gt;= 0endstructure IntComparable : COMPARABLE = struct type elem = int fun compare x y = case Int.compare (x, y) of LESS =&gt; ~1 | EQUAL =&gt; 0 | GREATER =&gt; 1endstructure IntOrd = Ord(IntComparable) signature / structure 之间的配合是 ML Module System 的重要方面，前者基于类型签名约定了一个接口（同样，不是 Java 意义上的接口…… 每次都要在术语处特别和 Java 划清界限实在是 😒😒😒），而后者则是对这一接口的实现。有趣的是，和绝大多数语言中类似接口的机制的设计不同，这一实现过程并不是简单的要求 “一模一样”，而是存在着复杂有趣的 签名匹配 signature matching 机制。这一机制提供了接口中重要的隐藏方面。 回归正题，我们首先定义 signature COMPARABLE，这类似于 Haskell 中的 class。随后，我们希望为内置类型 int 实现这一 typeclass（这一过程称作 ascription）——我们定义了 structure IntComparable : COMPARABLE（这类似 Haskell 中的 instance），没错，冒号 : 正是 “实现自” 的意思。 至此我们已经完成常规意义下的 typeclass 范式——定义一个接口，并使既有类型实现这个接口。 出于演示目的，我复杂化了这个示例：除了单纯的 typeclass 范式之外，此处演示了基于 typeclass 范式的后半截逻辑：在一个既有类型的 typeclass 实现之上，定义 “任何实现了这个 typeclass 的类型，都具有这些操作”。这是通过一个看起来有点奇怪的关键字 functor 实现的。functor （称作 module function）基于一个已有的 signature 完成这一转换路径：如果一组元素 {A} 在一个类型 X 上有定义，那么 X 上就会有另一组元素 {B}（在这里，{A} = { type elem, fun compare }；X = int；{B} = { fun le, fun eq, fun ge }）。 这个转换路径听起来是不是很像 mixin…？ 以及这个 “后半截” 逻辑听起来是不是很像 Rust 中的 From / Into…？ 在这段代码中，我们首先通过 IntComparable 实现了 typeclass 范式，随后 functor Ord 在 IntComparable 上的实例化（这个语法也很有意思，Ord(IntComparable) 这种结构的语法其实正是在提示这种 “参数传递” 的 “实例化” 意味）完成了后半段：我们使用 typeclass 范式为一个业已存在的类型 int 实现了一组操作，随后基于这组操作衍生出了一组新的操作。 这一示例的演示如下： >folded output from *Standard ML of New Jersey* REPL v110.98.1123456789101112131415161718192021222324252627282930313233343536- use &quot;typeclass.sml&quot;;[opening typeclass.sml]signature COMPARABLE = sig type elem val compare : elem -&gt; elem -&gt; intendfunctor Ord(X: sig type elem val compare : elem -&gt; elem -&gt; intend) :sig val le : X.elem -&gt; X.elem -&gt; bool val eq : X.elem -&gt; X.elem -&gt; bool val ge : X.elem -&gt; X.elem -&gt; boolendstructure IntComparable : COMPARABLEstructure IntOrd : sig val le : X.elem -&gt; X.elem -&gt; bool val eq : X.elem -&gt; X.elem -&gt; bool val ge : X.elem -&gt; X.elem -&gt; boolendval it = () : unit- IntComparable.compare 42 42;val it = 0 : int- IntOrd.eq 42 42;val it = true : bool- IntComparable.compare 2 4;val it = ~1 : int- IntOrd.le 2 4;val it = true : bool 一点局限性在于，我们需要为 typeclass 的两个部分赋予不同的名字：IntComparable 和 IntOrd。重名在 SML 中式不允许的——后出现的定义将会 掩蔽 shadow 掉先出现的定义。 ML Module System 是一个完备、丰富、强大的模块系统，它的能力远远不止于此（比如，sharing constraints 等并未提及）。 最后，顺带一提，我们在一个接口中包含了一个类型（type elem），并且接口中的其它定义依赖于这个类型定义（val compare : elem -&gt; elem -&gt; int），这在很多语言中被称作 联合类型 associated type。 由于 SML 相当冷门（因而更难以熟悉），我们在这一节上花费了大量笔墨。接下来看一看其它语言中的 typeclass。 Typeclass in Haskell: class &amp; instanceHaskell 是一门静态类型的函数式语言，这门语言的最大特点，在于它是 惰性求值 lazy evaluation 的——这是一个不同于绝大多数语言的设计决策。除此以外，高度拥抱犯愁范畴论及相关术语（而不是如 Scala 语言设计者一般在这个问题上相当谨慎，引自 Dean Wampler），同样是这门语言的重要特征（然而正如它的核心发明者之一 SPJ Simon Peyton Jones 说的那样，Haskell 没有学习 F# 采用更加保守的命名而是全面拥抱理论数学，或许是一个相当错误的决定，引文见文末）。 typeclass 这一范式正是由 Haskell “定义”，一般认为 Haskell 语言是这一范式的起源： typeclass.hs12345678910111213141516class Comparable a where comp :: a -&gt; a -&gt; Integerinstance Comparable Integer where comp x y = case compare x y of GT -&gt; 1 EQ -&gt; 0 LT -&gt; -1le :: Comparable a =&gt; a -&gt; a -&gt; Boolle x y = comp x y &lt;= 0eq x y = comp x y == 0ge x y = comp x y &gt;= 0 大部分部分都是不言自明的，在此不做过多解释。显然，得益于强大的类型推导机制和精心设计的语法，Haskell 中实现 typeclass 的代码量是相当小的。 我们仅为 le 标注了类型：类型声明是可选的（虽然建议标出），因为 Haskell 可以帮你推断出来。由于在可变性上采取了更加严格（因而更加函数式）的规定，Haskell 不必像上一节提到的 SML 一样在类型系统上 “开洞”，引入所谓的 value restriction 和 dummy type。 我要用腐朽的声音喊出：**Hoogle 天下第一！！😋** 强烈建议其它所有良好支持 typeclass 范式的语言都要（至少是对语言标准库）有这么一个 class 的查询引擎，避免重复轮子…… 演示如下： >folded output from *ghci* lts-15.91234567891011Prelude&gt; :load typeclass.hs[1 of 1] Compiling Main ( typeclass.hs, interpreted )Ok, one module loaded.*Main&gt; comp 42 420*Main&gt; eq 42 42True*Main&gt; comp 2 4-1*Main&gt; le 2 4True 同样基本是不言自明的。 Typeclass in Rust: traitRust 是主要由 Mozilla 开发、现依托于开源社区和 Rust Foundation 独立运行的面向函数式、静态类型的非托管语言，它直接编译到机器码，并通过精心设计的 所有权 ownership 机制达成了非托管语言难以做到的内存安全（具体可以看看咱博客的 Rust 系列文章 😉）。 Rust 中采用了 trait / impl 原语实现这一机制。个人浅见是 struct 基本等同 record，trait 基本等同 class，而 impl 基本等同 instance，所以说 Rust 的表达力基本没有太多超出 ML 系语言的一般水平。 与上两例不同，Rust 并没有使用 柯里化 curring 为函数传参的传统，亦未为这一特性提供一等支持： typeclass.rs1234567891011121314151617181920212223use std::cmp::Ordering;trait Comparable { type Elem; fn compare(&amp;self, y: Self::Elem) -&gt; i8;}impl Comparable for i32 { type Elem = i32; fn compare(&amp;self, y: Self::Elem) -&gt; i8 { match self.cmp(&amp;y) { Ordering::Less =&gt; -1, Ordering::Equal =&gt; 0, Ordering::Greater =&gt; 1, } }}fn le&lt;TT, T: Comparable&lt;Elem = TT&gt;&gt;(x: T, y: TT) -&gt; bool { x.compare(y) &lt;= 0 }fn eq&lt;TT, T: Comparable&lt;Elem = TT&gt;&gt;(x: T, y: TT) -&gt; bool { x.compare(y) == 0 }fn ge&lt;TT, T: Comparable&lt;Elem = TT&gt;&gt;(x: T, y: TT) -&gt; bool { x.compare(y) &gt;= 0 } 作为一门函数式气氛较弱的语言，强制的显式类型标注（并重复两次）、以及需要通过 泛型 generic 指明类型约束使这段 Rust 代码稍显冗杂——大多数工业级语言都只能做到这个程度。 演示如下： >folded output from *Rust Playground*> Try this on your own 😉1234567891011121314151617181920212223242526fn main() { println!(&quot;{}&quot;, 42.compare(42)); println!(&quot;{}&quot;, eq(42, 42)); println!(&quot;{}&quot;, 2.compare(4)); println!(&quot;{}&quot;, le(2, 4));}------------------ Standard Error ------------------ Compiling playground v0.0.1 (/playground)warning: function is never used: `ge` --&gt; src/main.rs:23:4 |23 | fn ge&lt;TT, T: Comparable&lt;Elem = TT&gt;&gt;(x: T, y: TT) -&gt; bool { x.compare(y) &gt;= 0 } | ^^ | = note: `#[warn(dead_code)]` on by defaultwarning: 1 warning emitted Finished dev [unoptimized + debuginfo] target(s) in 0.77s Running `target/debug/playground`------------------ Standard Output ------------------0true-1true 有关 Rust 的更多内容，欢迎访问 Rust Language 以及查看本博客中 其它有关 Rust 的文章。 Try this on your own 😉: https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=07c98bcedef5ca99b40e4988e09d8137 Typeclass in C++ 20 Indian Concept: A Failed Endeavour你可能会疑惑，啥啥啥？？🤨🤨 C++ 啥时候也有 typeclass 了？？？😯😯😯 然而，正如本节的标题所提示的：这是一次失败的努力。语言设计提案最终未能获得 共识 consensus。 来看看这个失败的提案（被称作 Indiana Concept）： typeclass_failed.cpp1234567891011121314151617concept Comparable&lt;typename T&gt; { int operator&lt;=&gt;(const T&amp; x, const T&amp; y);}concept_map Comparable&lt;int&gt; { int operator&lt;=&gt;(const int&amp; x, const int&amp; y) { if (x &gt;= y) return 1; else if (x == y) return 0; else if (x &lt;= y) return -1; }}template&lt;Comparable T&gt; bool le(const T&amp; x, const T&amp; y) { return (x &lt;=&gt; y) &lt;= 0; }template&lt;Comparable T&gt; bool eq(const T&amp; x, const T&amp; y) { return (x &lt;=&gt; y) == 0; }template&lt;Comparable T&gt; bool le(const T&amp; x, const T&amp; y) { return (x &lt;=&gt; y) &lt;= 0; } 其实也蛮简洁的嘛。 为什么没有获得通过？typeclass 它难道不比模板、还有 TMP 模板元编程 这种诡异至极的奇葩 香多了吗？ 这一提案最初于 2006 年正式提出，并最终在 2009 年决定正式从即将发布的语言规范草案中移除。Bjarne 在 HOPL3（详见文末 “主要引述来源”）中无不惋惜地说： That decision cost us three years of hard work and much controversy … We could not agree to “fix” concepts to make them usable by most programmers and also ship the standard (more or less) on time. Thus, “concepts” – the result of years of work by many competent people – was removed from the draft standard. 个人认为，typeclass 范式所倡导的 be explicit 和 C++ 本身一贯执行的 be implicit 哲学之间的阻抗失配不契合是该提案失败的重要原因（我的另一篇博文中对这点有更深入的解读）。HOPL3 中列举的原因有： 各个层面的语言设计进展相当缓慢，关键问题仍未解决。难以达成共识。 一些精心编写的 concept_map 和 late_check 会导致类型系统 不完备（unsoundness）。 现有的这一部分规范极度复杂，长达 91 页。可读性很差。 在标准库中落地 concept 的工作量令人意想不到地巨大无比。 性能极低。 （despite “heroic efforts from Doug Gregor”）启用了 concept 的编译器编译速度比未启用的编译器慢不止十倍。主要的 C++ 编译器供应方表示，只要有超过 20% 的性能损耗，他们就不会同意提案。 后来由 Bjarne 主导设计的新提案取得了长足进展，形成了在 GCC 6 中得以实验性发布的 Concepts TS，并经少量修改最终形成了我们现在见到的 C++ 20 Concepts：concept 被定义为类型的谓词（即 constexpr &lt;type&gt; -&gt; bool。 个人看来这是一个相当精妙的设计思路。很好地利用了 C++ 现有的基础设施：对于 constexpr 的支持。 就和 auto 很好地利用了模板类型推导这一基础设施一样。 Typeclass in Scala 2: implicit“Scala 是 Scala 是一门编译到 JVM 字节码的多范式语言。在所有工业级编程语言中，Scala 以其惊人的复杂度和优雅程度而著称。” Scala 中的 typeclass 范式主要是通过 trait 和 隐式 implicit 实现的。 就和 SML 的 Module System 远远不止 typeclass 一样——Scala 的 implicit 同样如此。Scala 的 implicit 是这门语言最为强大的特性之一，除了 typeclass，它还能够表达诸如 隐式参数 implicit parameter、隐式证据 implicit evidence、类型限定 type constraint、扩展函数 extenstion ，等等等等，好用有趣的语言范式上。 因为隐式的用法实在是太多太混，于是 Scala 3 就把这一个关键字上承担的过多功能分拆到了几个不同的关键字上… 所以，这就是隐式的其中一种用法： typeclass.sc12345678910111213141516trait MyComparable[T, TY] { def compare(x: T, y: TY): Int}object MyComparable { implicit val intIntComparable = new MyComparable[Int, Int] { override def compare(x: Int, y: Int) = x.compare(y) } def le[T, TY](x: T, y: TY)(implicit instance: MyComparable[T, TY]) = instance.compare(x, y) &lt;= 0 def eq[T, TY](x: T, y: TY)(implicit instance: MyComparable[T, TY]) = instance.compare(x, y) == 0 def ge[T, TY](x: T, y: TY)(implicit instance: MyComparable[T, TY]) = instance.compare(x, y) &gt;= 0} 由于隐式本身用法多样带来的复杂性，上边这段 Scala 代码看起来比较复杂。再来看一下演示： >folded output from *Scastie*> Try this on your own 😉12345678910111213141516// Exiting paste mode, now interpreting.trait MyComparableobject MyComparablescala&gt; implicitly[MyComparable[Int, Int]].compare(42, 42)val res0: Int = 0scala&gt; MyComparable.eq(42, 42)val res1: Boolean = truescala&gt; implicitly[MyComparable[Int, Int]].compare(2, 4)val res2: Int = -1scala&gt; MyComparable.le(2, 4)val res3: Boolean = true 在代码和演示中，我们使用了 隐式参数（implicit instance）和一个标准库中的对象 implicitly 查找当前上下文中符合类型要求的隐式。这一过程称作 召唤 summon（是不是很中二啊www 😉）。 Try this on your own 😉: https://scastie.scala-lang.org/YxSlxJPnRXKYn9Lh5dEVig 结语，及主要引述来源为与各个编程语言的惯用法和文化相适应（更加地道），各节中的例子均有一些实现细节层面的修订。这使它们看起来并不完全一样（有一些通过柯里化传参，一些是直接传参；一些方法名为 compare，一些是 comp （为了避免命名空间冲突），一些使用的是 太空船运算符 spaceship operator &lt;=&gt;（这个名字真是太可爱了www 😙））。 顺带一提，这篇文章里的大部分演示，其实都是我看着 Haskell 的那段代码对着写的… Snipaste 天下第一！ 主要引述来源： The Expression Problem, Philip Wadler. http://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt Griesemer, R., Hu, R., Kokke, W., Lange, J., Taylor, I. L., Toninho, B., … &amp; Yoshida, N. (2020). Featherweight go. Proceedings of the ACM on Programming Languages, 4(OOPSLA), 1-29. MacQueen, D., Harper, R., &amp; Reppy, J. (2020). The history of Standard ML. Proceedings of the ACM on Programming Languages, 4(HOPL), 1-100. Notes on SML97’s Value Restriction, Geoffrey Smith. http://users.cs.fiu.edu/~smithg/cop4555/valrestr.html Simon Peyton-Jones: Escape from the ivory tower: the Haskell journey, SPJ Simon Peyton-Jones. https://youtu.be/re96UgMk6GQ 《简单聊聊编程语言的哲学，以及关于 Rust 的一些想法 (1)》, Myself. https://ray-eldath.me/programming/thoughts-on-rust-1 HOPL3: Stroustrup, B. (2020). Thriving in a crowded and changing world: C++ 2006–2020. Proceedings of the ACM on Programming Languages, 4(HOPL), 1-168. No ‘Concepts’ in C++0x, Bjarne Stroustrup. https://accu.org/journals/overload/17/92/stroustrup_1576/ https://en.cppreference.com/w/cpp/compiler_support https://github.com/Ray-Eldath/whatever/blob/master/main/src/main/scala/cats/monad/Monad.sc 一些语言的 Playground（都超级好用！）： Rust：https://play.rust-lang.org/ Scala：https://scastie.scala-lang.org/ Haskell 部分使用 ghci REPL 编写 SML 部分使用 Standard ML of New Jersey REPL 编写 两天啥也没干狂肝两篇博文，可真是把我榨干了。 这个假期应该不会出新博文了… 想静下心来休息下，学点东西啥的。 最后，yet again：各位新年愉快！ ——以及，今天是我的18岁生日，祝我自己成年快乐。🎂🎂🎂🙌🙌🙌🎈🎈🎈🎉🎉🎉 希望今后能学到更多有趣的东西，创造一些更有价值的事物，去到更加遥远的地方，了解更加广阔的世界，认识更多有趣的人——并和他们一起前行。 各位，两周后见！👋👋👋 &lt;全文完&gt; 今天网易云推的歌怎么都那么好听啊 www","link":"/programming/on-typeclass-paradigm/"},{"title":"简单聊聊编程语言的哲学，以及关于 Rust 的一些想法 (1)","text":"本文是一篇「小作品」。 草，写着写着发现越写越长，一点也不「小」嘛。 感觉这样下去真的不行，如果每次动笔都是起码五千字——意味着好几天的全天候无休码字、占用了所有的空闲时间、导致长久的眼睛酸疼的话，很快就要丧失更新博文的动力了…… 😥😥😥 我应该真的尝试一下「小」作品的体例才是。 我的长期TODO列表里已经躺着五六篇以“博文”开头的条目——原本想着寒假一周一篇很快就能写完，然而到现在也没动笔。爆肝填坑了一个星期，今天实在有点累，不大想打开 RustLion，于是把这篇坑了很久的文章写一写。 在这几篇坑了这么久的文章中其实有一篇已经写了前半部分了，然而咕了太久后半部分要写什么都有点不大记得，于是只能前功尽弃…… 😥😥 本文的主要内容是从我个人的经验出发，简单聊聊对于 Rust 的一些想法和体会。我会尽量避开诸如 “文档质量良好”、“很有特点” 这类宽泛的概括，而尽量将自己在使用 Rust 编程的过程中感受到的一些特别之处、尤其是和此前经历的不同之处拿来说说。我期望如此行文能使得本文对无论是 Rust 初学者、还是仍在观望的开发者甚至是 Rust 老手们都能带来一定启发。 本文将主要按这些体会主要关注的语言侧面组织，每一点之间的内容基本独立，我将尽量涉及从语言哲学到线程安全的实现细节等多个方面和层次的内容。 由于篇幅原因，本文将分截为两到三篇文章发出。其实原本不想写这么多……. 😥😥😥 以下是文章内容的粗略概要（很可能有变动）： 编程语言的哲学 Rust: “be explicit” 复杂性 “子语言” 并发和线程安全 第一部分：主要引述来源 继承 V.S. 组合：另一种思维方式 Typeclass 和 mod 元编程和宏系统 结语：“language adopted to fill a niche” 第二部分：主要引述来源 本文将包含以上概要的第一到三部分。其实原本真的真的不想写这么多……. 😥😥😥😥😥😥 &nbsp; Cover image by&nbsp; かざり &nbsp;on&nbsp; Twitter. 编程语言的哲学一直以来我都认为，一门计算机语言的哲学对语言多个方面的特性都有着非常重要的影响，理解语言的设计哲学对理解语言为何如此有着重要的意义。比如，个人认为： Java / JVM：打造大规模企业级程序的首选平台 这一定程度上解释了 Java 选择较重的运行时（因而免除了手动内存管理的麻烦），并且为了在具有较重运行时的前提下同时达到企业级程序要求的 “处理大量数据时的性能开销仍然可以忍受”，Oracle 在 JVM JIT 以及GC的设计和实现上投入很大。Zing VM 拥有目前市面上性能最强的GC器之一（据此处，Zing VM 的 C4 可以在管理高达2TB堆内存、外加10TB堆外内存时仍然保持 5ms 以内的并发GC停顿），而新近出现的几个Hotspot GC 器（Shenandoah、ZGC）的工作表现同样相当不错（Grammerly 报告工作在生产环境的 Shenandoah 在 10k req/s 的 QPS 和 60GB 的堆内存下仍然具有 &lt;10ms 的GC停顿（hicuup），见此处）。另一方面，据 Mark Reinhold 所述，Hotspot JVM “目前70%-80%的工作都是在C2（第二级JIT）上”，大量研究表明经过深度JIT优化的字节码可以达到和原生代码同等、甚至更高的效率（GraalJS 是使用 Java 实现的 JavaScript 运行时，它工作在为高效执行跨多个语言的应用而特别设计的虚拟机 GraalVM 上，近期有报告指出深度优化后的 GraalJS 可达到优于 V8 的执行效率（参见此处），这个结果还是蛮搞笑的……）。 重要的一点观察是，通过较重的运行时，开发人员可以将注意力更好地集中在业务本身，而非各种内存管理策略带来的、通常是令人气馁的复杂性和安全问题。据此引文，尽管业界已在大量静态分析和动态检查工具（如 Cppcheck、Valgrind Memcheck 等）上花费了数亿美元，并付出了同样艰苦的努力制定编程规范并培训程序员们，每年仍然有超过70%的软件漏洞（CVE）与内存安全问题有关。从这个角度上来说，托管语言（managed language）天生地比非托管语言（unmanaged language）更好地适合大多数的应用场景——在这些场景下，开发人员生产代码仅仅是为了解决常规的业务问题，有关代码优化、大内存管理等等细节，交由较重的运行时、进而转嫁给专门处理这些复杂方面的虚拟机专家们就好了吧。 在这个问题上，Rust 选择了一条独特的道路：它通过严格的编译规则和精心设计的标准库达成了通过编译器强制保证的内存安全性——如此既没有内存不安全的风险，又没有运行时的性能开销。然而，这样的设计加重了程序员的心智负担，并带来了主要的复杂度——对于编译器和编程人员皆是如此——和“比较陌生的方面”，而这样的复杂度和我们通常所说的 “复杂” （Scala 式的 “复杂”）之间存在一定区别，这点会在下文中展开来讲。 Scala：用最少的特性，做最强的语言 Scala 是一门编译到 JVM 字节码的多范式语言。在所有工业级编程语言中，Scala 以其惊人的复杂度和优雅程度而著称。个人认为，Scala 在考虑语言设计时的重要方面是更加重视特性之间的 “联动”：如果能通过几个更加基本的特性来实现一个需要的特性，Scala 会优先选择更好地支持这几个小特性，而不是为了某一个常见的编程 idiom “开近道” ——这样的语言设计有时能够获得非常好的“联动”效果，因为几个小特性各种各样的组合方式通常比几条近道能表达更多的东西，当然也要复杂得多。一个非常好的例子是 Scala 中的枚举：大多数语言中的枚举（如 Java、Kotlin、C# 等）都是作为一个特殊的语法（enum class）来实现，它由编译器负责展开；然而 Scala 通过两个更加基本的特性（类型别名和继承）实现了枚举这一特性，并未在语法层面提供任何特殊支持。相似的例子还有类型标识符由类型投影这一个小特性实现，而类型投影又和结构化类型发生“联动”最终产生了类型 lambda 这一堪称神奇的特性。 简单展示一下这个神奇的存在，通过 typeclass 范式为 Map 类型实现 map 函数： 123456implicit class MapFunctor[K, V1](mapV1: Map[K, V1]) extends Functor[V1, ({type λ[α] = Map[K, α]})#λ] { def map[V2](f: V1 =&gt; V2): Map[K, V2] = mapV1 map { case (k, v) =&gt; (k, f(v)) } } 看到那串 λ、α 了吗？这，就是 Scala。 不过这串代码依然给我一种非常优雅的感觉。目前能让我感觉十分优雅的还是只有Scala（和 Ruby？）…… 一直没有机会拿来写点复杂项目啥的，其实感觉都要忘光了…… 哭哭 算了，等 Scala 3 用起来了再完全重学吧（（（（ Ruby：极致的脚本语言 Ruby 的许多特性强烈地偏向对脚本语言的良好支持。在我看来几乎从任何一个可以想象的方面来说 Ruby 都要比 Python 更加合适作为脚本语言的默认选择…… 比如 Ruby 支持任意地方法覆写，你甚至可以覆写在 Int 中定义的 + 方法从而立刻把REPL给崩掉… 比如 Ruby 非常好地普及了守护（guard）的使用，从而使得大量的 idiom 有了 one-liner；比如这是一门动态类型语言，编译器只会阻止很少的事情；比如 Ruby 简洁的闭包语法（事实上 Rust 中的闭包语法正是沿袭自 Ruby）、do 语句以及对各种常用集合操作的良好支持，使得以闭包作为参数的标准库API基本可以替代循环；比如各种高度动态的语言特性和内省（introspect）机制。良好和高度动态的设计使得 Ruby 不仅适合编写各种 dirty but works 脚本，同样也适合工业的快速成型。 希望 Python 早日凉透。（光速逃 Rust: “be explicit”Rust 一点重要的设计考虑，在于 be explicit。或许是看到了 C++ 长期坚持在各种问题上走隐式优先的策略如今吃了太多苦头（比如隐式类型转换一向以来被视作是 “bug 的一大来源”，甚至还有 std::string str = 12; 这种毒瘤写法…… 而且似乎删除函数也没帮上什么忙（😒 ）于是 Rust 选择了要求程序员明确指明绝大部分转换的写法——即 “be explicit”。作为一门侧重在受限资源环境下尽量保持极低性能消耗的语言，Rust 要求对资源的创建必须显式声明。这一点首先以 Rust 中全局采用移动语义（move semantics）和严格的引用/借用检查器为基础，再通过标准库中的的一些 trait（Typeclass 式的）强制资源创建的显式声明。最为代表性的例子自然是 to_owned： 12let str: &amp;str = &quot;Hello&quot;;let str: String = str.to_owned(); str 类型作为编码在二进制文件中的字符串，其类型显然应为这一串二进制字符串的一个 slice（即 &amp;str）。它不在堆上占据空间，而仅仅是一个指向文件中某一段的指针；自然而然，对一个指针执行字符串拼接是不可能的——于是在 Rust 中，连续地拼接字符串不仅语法繁琐，而且还需要对语言有一定的熟悉： 123456let s1 = &quot;hello&quot;;let s2 = &quot; &quot;.to_owned();let s3 = &quot;world&quot;; let concat = s1.to_owned() + &amp;s2 + s3;println!(&quot;{} {} {} -&gt; {}&quot;, s1, &amp;s2, s3, concat); Rust 要求在各种引用、分配内存时显式声明，这使得程序员更加关心引用的传递以及资源的消耗：以程序员的更高心智负担为代价，Rust 不断提醒着程序员注意资源分配，通过语法的冗长督促提醒程序员尽量减低资源使用。 Rust 同样具有一些程度的隐式（implicit ，注意不是 Scala 语境下的那个 implicit）：如通过 Copy trait 实现隐式的复制语义、解引用强制多态（deref coercions）等。Rust 谨慎控制了这些隐式的适用范围，前者仅适用于少数复制成本极低的内建类型（而如 String 一类有较高潜在复制成本的类型则需要通过 Clone trait 显式指定和调用；Clone 和 Copy 的分立是 Rust 在 be explicit 哲学 和 语言易用性 之间取得的良好折衷），后者则仅适用于函数和方法传参。 有时候，复杂的分配声明、引用和解引用转换会导致冗长难读的代码。Rust 通过一些标准库 trait 部分缓解了这一负担，并通过宏（macro）系统（下文会更深入地涉及）为一些常见范式提供了全兼容的写法，将这一负担转嫁到宏的实现中。比如，众所周知，大家都不喜欢用 + 做字符串拼接，*in Rust, we use format!*： 123456let s1 = &quot;hello&quot;;let s2 = &quot; &quot;.to_owned();let s3 = &quot;world&quot;; let concat = format!(&quot;{}{}{}&quot;, s1, s2, s3);println!(&quot;{} {} {} -&gt; {}&quot;, s1, &amp;s2, s3, concat); 这一点哲学，是 Rust 的首创吗？我想不是。写到这里，我在想，是不是所有与ML系（或者说 Haskell 系？）语言的元素（如 Typeclass、ADT through datatype + pattern matching with exhaustiveness checking 等）有强烈关联的语言都更加倾向于 be explicit。Rust 如此；Haskell 如此；C++ 20 的一个失败的 concept 的设计草案（被称为 Indiana Concept）同样如此（我觉得这个草案被否决某种上是因为在一门本来鼓励隐式的语言中去推行 be explicit 只会导致如 late_check 这样明显权宜之计的简陋方案，即是说 Typeclass 式的哲学与 C++ 本身的哲学并不契合是导致 Indiana Concept 未能取得成功的重要原因）；SML 做得还要更绝，它甚至不允许对实数进行判等，因为这样的判等本身隐含了一种对精度的约省。 这样一簇语言设计思路为什么都走向了 be explicit 这一哲学？这一哲学是必然隐含在人们通常界定的 “ML味”（即：带类型推导和参数化多态（但没有子类型多态）的静态类型系统，即 Hindley-Milner 类型系统；datatype 支持的 ADT 以及模式匹配（pattern matching）和解构句法；一个模块子语言，它提供了巧妙的隐藏机制且某种程度上正是一种 Typeclass 范式的实现（关于这点可能会另写一篇文章简单说说），即人们常说的 ML module system）中的吗？还是说，这仅仅是同一帮人带着同样的思想和哲学反复参与到各种语言及语言草案的设计中？ 比如说，Dan Grossman 就说：comparing real numbers with == is a really bad idea. 然而我其实觉得还好…… 其实如果正确规定浮点数的判等（比如说，$a-b = \\delta &lt; \\epsilon ;=10^{-5}$）并在文档中广而告之这一默认行为，或者强制要求程序员在执行浮点数判等时必须指定 $\\epsilon$（指定采用 “默认值” 也算指定），可能会是一个解决方案… 然而有没有人买账呢。:-( 其实老实说，在我个人的编码工作中是极少遇见浮点数的。或许根据众所周知的编程语言设计原则让那些罕见的操作（比如浮点数判等）繁琐但精确会不会是一个不错的选择？🤔 复杂性我想大家应该都会同意，Rust 是一门复杂的语言。但是 Ruaaast 的复杂性并不在于这一门语言表达力多么惊人、程序员能够接触到多少新的特性、进而将此前多少无法简洁表达的抽象统统实现，而是在于 Rust （出于各种权衡）引入的独特所有权和线程安全机制将大大挑战程序员以往的思维——或者说，Rust 带来的主要的复杂度和陌生之处，并不用于向程序员的工具箱中增添多少强力的工具（事实上，个人认为，很大程度上 Rust 的表达力并未显著超出ML系语言的一般水平，详见下文），而是用于解决很多其它语言中并不存在的问题。 Rust 具有复杂的类型系统。在 Rust 中，不仅值和引用（以及和引用的引用，引用的引用的引用，…）不是同一个类型，不符合生命周期约束的引用，同样不是同一个类型，不匹配的传参将会被编译器拒绝（生命周期 “匹配” 的规则，能不能看作是生命周期的 subtyping…？比如，&amp;'static 总能符合各种生命周期约束）。 “子语言”借用知名PLT大V千里冰封在某次技术分享中的话语，那就是和绝大部分计算机语言一样，Rust 同样也是由很多门子语言组成的。简单列举一下，我们可以得到： 表达式子语言规定了表达式（expr）的句法、类型检查规则和执行规则（这三点其实是 Dan Grossman 在课程 Programming Languages 中提出的：syntax, type-checking rules, evaluation）。 模块（mod）子语言指明相对独立的命名空间相互暴露和引用的方式。众所周知，这在 Rust 中是通过 mod 的引用（use）来实现的。 多态子语言（注意，此处的「多态」指 polymorphism，即 “参数化多态”、“子类型多态” 意义上的多态，而非 Java 语境下的那一种多态（对于 Java 语境下常被提及的多态，我想更多地应该是指动态分发 dynamic dispatch）…）为语言提供了一种表达力，它使得同一段代码能够应用于各种不同的类型。向这些类型施加限制（并转化为相对于这段代码而言的 “已知条件”）的方式、语法和规则，由这门子语言指定。C++ 中采用的模板（相较于 多态 polymorphism 这个术语，Bjarne 本人似乎喜欢把这个叫做 “泛型编程 generic programming”，但为了避免和 Java 式的那种泛型混淆我们还是称多态好了（然而 “多态” 也容易和那种 Java 式的那种多态（实际上是 动态分发 dynamic dispatch）搞混嘛（（（（😒 所以最终结论是 Java 的广泛流行对各种术语的界定真是后患无穷（（（（ （光速逃🤯 ）、Rust 和 Java 存有一定近似（别打我）的泛型系统（尤其是在约束这一层次上）、ML系语言中的参数化多态（'a），皆属此项。 Rust 的多态子语言基本通过基于 trait 的可加和 context bound 施加限制（e.g. T: Clone + Debug），这在 Java 中可以通过基于 interface 的 bounded type paremeter 近似达成（e.g. T extends A &amp; B）。个人认为在这一层次上 Java、Scala、Kotlin、C# 一类的语言由于具有子类型化（subtyping）要更加复杂，它们需要处理诸如逆变和协变（还有存在类型 existential type）一类复杂的问题（并导致大量微妙的设计差异，比如 Java 的定义处类型变异和 Kotlin 的声明处类型变异，显然后者是更优解）甚至有时候还有数组协变这样的难搞历史包袱。 其实这段有点扯淡…… 因为 Rust、Haskell、Scala 式的 Typeclass 原语允许一个新增的类型实现（分别通过 impl 块、隐式转换 implicit conversion、instance 块）某一个预先定义的 typeclass（虽然这些语言中一般都会 孤儿规则 orphan rule 限制这样的 “实现” 的适用范围），而以 Java 为代表的一类语言中的 interface 其实是不具有这种能力的。 这其实是对著名的 表达式问题 Expression Problem 的解的探讨…… 某种程度上个人认为 typeclass 其实是对这个问题一个很好的解，关于这个问题以及不同语言（Haskell、Scala、Rust；C#、Kotlin；Ruby）的不同解法（Typeclass；扩展函数；mixin）有空在以后的博文中再聊. 😋 另一方面，Rust 有一些它需要关心的特殊问题。由于 Rust 中对象创建时的内存分配由编译器完成，Rust 引入了 marker trait Sized，它指明被标记的类型的大小在编译期可确定（这是程序能够通过编译的重要条件），并默认所有的类型（除非特殊声明）均是 Sized 的。 Rust 实现这一点的方式是，向语言中引入了新的语法 unsafe auto trait。当一个 marker trait 被声明为 auto 时，编译器会自动为所有类型实现该 marker trait ——除了预先指定的那些反例，如 impl !Trait for Type。综合来看，这一套语法要求编译器为反例之外的所有类型自动生成对某一 marker trait 的实现。 为了使一些 context bound 能够适用于非 Sized 的类型，Rust 又引入了语法 ?Sized。当它出现在一个 context bound 中（如 T: ?Sized）时，表明限制该类型（T）为 Sized 或非 Sized 的。（某种程度上 ?Sized （而非 T）才表示 Rust 中的 “所有类型” ？） 下文将要提到的 Send 和 Sync 也是通过这样的方法实现的。 个人认为，问题在于（花了超多时间和笔墨讲前面的这几点可却仅仅是个铺垫…… 超级累啊 😣😣 ），这一部分语言设计并不算好。表观的定性认识是，Rust 专为一些基本可以说是 实现细节 的东西专门提出了几条语法，并且将这几条语法的适用范围牢牢限制在它们之所以被发明出来的那一部分——即是说，这一部分语言设计，几乎不可能与语言的其它部分产生联动，而良好的特性联动无疑是语言设计上佳的重要标志。另一方面，出于类型系统完备性（soundness）等各种各样的考虑，这些 auto trait 在语言各个层面上的工作方式（比如，supertrait，模式匹配等）均和一般 trait 存在差异——这与良好语言设计的另一个标志，即 “创造尽量少的特例” 相悖。个人的认识是，这些 auto trait 是贯穿 Rust 语言的几个深“洞”，它们要求语言各处为它们制定独一无二的规则，并且将这些规则牢牢限制在它们本身。 除此以外，由于 ?Sized 肩负着 “所有类型” （存疑？） 的职责，这一极其局限的语法在大量代码中均有出现（比如标准库、tokio、一些第三方集合库，等等）。将一个常见且重要的职责赋予一条怪异、适用性低、并不直观的语法，长久以来提高了初学者的理解负担（“依赖里头突然看到了个这个，它到底是什么意思啊？”），并使人们不断提出这样的问题：为什么这三条语法不能广而推之？于是我们看到有关 negative bounds 的语言设计提案（RFC）和讨论被不断提出，语言设计者们不厌其烦地解释为什么这是个坏主意，以及为何更加细致考虑的特性（如 specilization）才是正途。 其实无论如何，Sized 都是一个只有 Rust 才会面临的特殊的难题——正如上文所述，这部分复杂度是为了解决一个其它语言中并不存在的问题。这部分设计，将原本就是泛型的意义强行嵌入到某一个 trait 中（“T 不就是所有类型吗？为什么还要造一个 T: ?Sized 呢？”），无论如何，这个问题难以优雅地解决。 生命周期子语言是 Rust 中极为特殊的一部分：同样，它也是为了解决其它语言中并不存在的问题。Rust 要求在 结构体 struct——注意，Rust 的结构体 完全不是 C / C++ 中的结构体——中出现的引用必须具有生命周期标记，语法借用了泛型中类型参数的语法： 12345struct BorrowedPoint&lt;'a&gt; { name: &amp;'a str, x: &amp;'a i32, y: &amp;'a i32,} 123fn print_multi&lt;'a, 'b&gt;(x: &amp;'a i32, y: &amp;'b i32) { println!(&quot;`print_multi`: x is {}, y is {}&quot;, x, y);} 尽管 Rust 已经实现了各种各样的生命周期推导规则和尽量复杂的生命周期分析（称作 non-lexical lifetimes），很多时候仍然需要程序员手动标明生命周期标记。对于结构体的生命周期标记尤其让人头疼：带引用的结构体 的生命周期标记是强制要求的，不能省略；而一个结构体上的标记会扩散到整个代码库中，即便对于能够自动推断得出的生命周期，也要使用生命周期标记省略语法 BorrowedPoint&lt;'_&gt; 注明。这使得相关的重构要更加复杂。 我仍旧相当惧怕在结构体中使用引用。很多时候，我并不能确切得出一个结构体到底是否适合包含引用的结论（这方面是否有一些指导原则和官方文档？），而贸然执行重构得来的是大规模的编译错误、繁琐的修正，有时最终又发现并不适合使用引用——典型的情况是在跨越线程边界时。 在很多情况下（个人经验是以 带引用的结构体 为主）仍然需要手工标注生命周期，而这一点仍然、并持续带来显著的心智负担。 自然要问的问题是，仅靠对程序的 静态分析 static analysis，我们能够将程序中每一个引用的生命周期分析到什么地步？即是说，Rust 的生命周期推导本身、以及类型系统和生命周期系统的配合，是否还有更加完善以更进一步降低程序员心智负担的可能？ 我仍然相当盼望不再强制带引用的结构体必须带生命周期标记的那一天。 除此以外，生命周期的继承机制（如：'a : 'b）和一些特殊生命周期（&amp;'static 和 T: &amp;'static ——注意，尽管两者语法极其相似，但语义却有重要差异，这是初学者容易犯的一个常见错误）的存在使这一部分的语言更加复杂和难以理解。 以上所有，在 Rust 的多种生命周期传递方式（函数/方法参数、结构体、闭包捕获等）各异的局限下，创造出多处特例，使得它的工作方式更加难以归纳和掌握。 可以看得出来，某种程度上本段对冰冰的 “子语言” 观点（不要打我）仅仅是作名词意义上的借用——和基于 PLT 研究风格的分析不同，本段的这种拆分与其说是在语言研究上有着什么启发性意义，不如说仅仅是将一门语言分块来说会更加方便而已。关于他的这部分观点的更多内容，详见文末 “主要引述来源”。 并发和线程安全我真的好累，眼睛还疼学校里还没有人喜欢我 😥😥😥，所以这个部分只能简单写写算了。 在一门没有运行时的语言里实现易用的并发是有挑战性的——特别是线程安全的并发。Rust 通过向标准库中引入几个设计精巧的 API —— Sync、Send、Pin 等——较好地解决了这个问题。Rust 一个重要的并发库 tokio 生态完整（包括基本协程支持、同步原语（信号量 semaphore、通道 channel）、流式并发、网络和网络包解析、结构化日志等等）、文档质量优异（事实上 tokio 的教程是我所了解过的开源项目中质量最高的之一 🤩），一定程度上简化了在 Rust 中实现线程安全并发的困难。 从一般工程实践上看，在 Rust 中编写良好的线程安全并发，需要了解的包括： 一些基本的同步原语：信号量 semaphore、通道 channel、互斥锁 Mutex、读写锁 RwLock 等 一些 Rust 特有的、为保证线程安全而特别设计的 auto marker trait： Sync 和 Send 一些 Rust 标准库 trait 和相关机制存在的必要性及用途：Pin / Unpin、Box::pin、tokio::pin 特殊生命周期 &amp;'static 以及 T: &amp;'static 的含义（尤其是这两者如何不同） 以及一些智能指针（其存在的必要性和局限，横向的比较，性能开销等等）：Box、Rc、Arc、RefCell 小问题： 123type MessageStream = StreamMap&lt;String, Pin&lt;Box&lt;dyn Stream&lt;Item=Arc&lt;PUBLISH&gt;&gt; + Send&gt;&gt;&gt;;type Publishers = Box&lt;dyn PublisherRepository + Sync + Send&gt;;type SyncSessionManager = RwLock&lt;SessionManager&gt;; 试解释以上类型别名中各个 API 出现之用途？ 除此以外，如果需要深入理解 Rust 并发的实现原理，还需要了解 Future / Waker、Scheduler 等。个人体会是并发库中各种并发操作的实现，由于 Future / Waker 范式本身固有的复杂性和理解难度以及惯用实现风格的原因，相关代码并不好读；这点在研究 poll 簇并发操作等方面时会带来一些困难。 在任何编程语言中实现线程安全的并发都需要细致的设计考虑和复杂的工程实现。Rust 社区呈现出如此完全的生态和易用程度，足以为开发人员和软件生产带来良好的体验，并为其它编程语言的设计带来重要启发。 第一部分：主要引述来源以下简单列出本部分文章主要引述资料的来源。有一部分引文已在原文中以超链接形式给出，故在此处略去。 《Scala 程序设计语言 (第二版)》；Dean Wampler, Alex Payne 著 王渊，陈明 译；人民邮电出版社，2016 Stroustrup, B. (2020). Thriving in a crowded and changing world: C++ 2006–2020. Proceedings of the ACM on Programming Languages, 4(HOPL), 1-168. rust-lang/rfcs#1210 - specialization https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md 《当我们在谈论编程语言的时候我们在谈论什么》，千里冰冰 https://ice1000.org/plct/0 https://github.com/Ray-Eldath/Telesteller/blob/master/src/server.rs Programming Languages, Part A. Dan Grossman. https://www.coursera.org/learn/programming-languages Programming Languages, Part C. Dan Grossman. https://www.coursera.org/learn/programming-languages-part-c MacQueen, D., Harper, R., &amp; Reppy, J. (2020). The history of Standard ML. Proceedings of the ACM on Programming Languages, 4(HOPL), 1-100. 本文就这么多。感觉其实没讲什么很有意思的东西。。。。然而我真是要累死了 😑😑 希望还有机会写完本文。祝大家新年 Ruaaaaaaaaast 愉快！ &lt;全文完&gt;","link":"/programming/thoughts-on-rust-1/"},{"title":"[选译] Nature 论文：关于动物同性性行为演化的另一种假说","text":"译者按：这篇论文最早是微信公众号「Nature自然科研」在每周新闻中推送给我的，是刊发于2019年11月号《自然：生态学与演化》（Nature Ecology &amp; Evolution）上的「观点（Perspective）」文章。我前天一个晚上看完了，看完总有种大脑升级的感觉，幼小的心灵受到了极大的震撼……. 花了三天，选译了几个比较有意思、比较重要或者单纯比较令人震惊的段落，放上来，各位当个“奇文共赏”就好。 论文原文：Monk, J.D., Giglio, E., Kamath, A. et al. An alternative hypothesis for the evolution of same-sex sexual behaviour in animals. Nat Ecol Evol 3, 1622–1631 (2019). https://doi.org/10.1038/s41559-019-1019-7 译者对原文内容、价值观不负责任，仅对翻译本身负责。 以下是选译的段落。译文中省去了所有的引用注记，并以 [粗体方括号] 标明跳过不译的段落。译文中粗体和斜体均为译者所加。 关于动物同性性行为演化的另一种假说作者： Julia D. Monk1, Erin Giglio 2, Ambika Kamath3,4, Max R. Lambert 4 and Caitlin E. McDonough5 摘要： 相同性别性行为（same-sex sexual behaviour, SSB）在超过1500种动物物种中均有记录，具有同性性行为的物种分布广泛，涵盖了大部分的主演化支（major clade）。演化生物学家长久以来渴望探明“同性性行为（homosexual behaviour）”的适应性根源，以期解决这个看似有悖于进化论的难题：相同性别性行为（SSB）是如何反复进化出来并长久存在，尽管我们假定这一行为会降低物种的适应度（fitness）？这一问题隐含地假设“异性的（heterosexual）”或排他的不同性别性行为（exclusive DSB）是动物的基本情形，而SSB自其演化而来。我们质疑这种将SSB必定视作演化难题的观点，并提出：事实上，相关文本对SSB的代价、收益和起源（costs, benifits and origins）做出的假设是未经检验的。有别于此，通过视角的微妙变化，我们为SSB的进化起源提出了另一种零假设（null hypothesis，指希望能证明为错误的假设，详见零假设 - 维基百科——译者注）：我们不认同SSB的起源和维持是一个需要解决的问题。我们认为，常见的，认为DSB是远古时期的基本情形的隐含假设，并未经严格审视；我们提出的假说认为指向所有性别的无区别性行为（indiscriminate sexual behaviour）才是远古时期的基本情形。如此，通过移动我们借以研究动物性行为的镜头，我们可以更有成果地研究不同性策略的演化历史。 自从查尔斯·达尔文（Charles Darwin）首次认识到自然选择和性选择是渐进式变化的引擎，演化生物学界对性和适应度的考察大都聚焦于个体之间、被认为能产生可受精配子（fertilization-compatible gamete）的性行为，这一行为通常被冠以“异性恋（hetrosexuality）”之名。为避免与通常用于人类性特征的名词混淆（方框1；有译文，见下），且更加精确地描述个体间的特定交互，我们称此类行为为不同性别性行为（DSBs；方框1）。因为个体适宜性被广泛理解为一个与个体生存和繁衍有关的函数，潜在地导致新的后代的诞生的DSBs，清晰地表明其对适应度的影响。然而，动物通常具有一系列的性行为，它们无法被归类为DSBs，亦无法直接导致成功的繁殖。这些性行为包括个体与相同性别、不同物种、尸体、无生命器物发生的性行为，以及自慰行为（self-stimulatory behaviour）。相同性别性行为（SSBs；方框1）是最广泛目击、最深入讨论的非DSB性行为中的一个。SSB在动物中分布广泛，超过1500种动物物种有记录在册的目击报告，包括所有的主要脊椎动物演化支以及多个无脊椎动物物种群（图1和表1；有译文，见下）。这些目击报告来自被捕获个体、实验室环境以及在多种生态条件下的野生动物种群；然而，大部分已知的SSB目击是偶然的，缺乏系统观察。 随着对SSB之普遍性与日俱增的认识，演化生物学家在解决被经常视作演化难题或“达尔文式悖论”的问题上下了更多功夫：为何SSB能够演化并持续，即便它并不能引向成功繁衍并因而降低个体的适应度？况且，若群体中所有个体仅参与SSB，种群将会灭绝。试图解决这一悖论的尝试通常以特定于某分类层级（taxon）的形式，试图找到SSB的，与适应度有关的（adaptive）解释或与适应度无关的（non-adaptive）解释。概括地说，与适应度有关的假说（如亲属选择（kin selection）、等位基因超显性（overdominance）、同种性别内冲突（intrasexual conflict）、两性冲突（sexual antagonism））认为SSB之所以进化出来，是因为它间接地有益于适应度。这些假说假定，在一定的进化时间内，与SSB直接或间接相关的等位基因（ellele）和表观遗传学修饰（epigenetic mark）对其自身的延续有益。相比之下，与适应度无关或与不良适应度有关的假说（如身份错认（mistaken identity）、监狱效应（prison effect；在方框1中有相关介绍，见下）、感染）认为SSB是一种“根本上错误的策略”，并断定它们要不源于基因多效性（pleiotropic effect），要不源于动物生物学其它方面的限制。 许多这些解释性的假说构建于少数关键假设之上，这些假设大多隐含于文本，而非明确叙述。首先，SSB研究似乎认为SSB高消耗是理所当然的——与适应度有关的假说据此假定SSB的益处必须非常高才能为其存在辩护，而与适应度无关的假说则假定，一旦可能，自然选择将强烈对抗SSB。其次，这些假说似乎假定SSB在多个动物谱系（lineage）中有独立的起源，进而将SSB视为一种特性，它在每一个研究系统中独立存在，发源于一个是排他的DSB（exclusive DSB，方框1）的远古种群，并随后通过与演化或有关或无关的过程变得更加普遍。 我们质疑这些假设，并提出了另一种对SSB之普遍性的新解释：远古的动物种群，其性行为既包括DSB，又包括SSB；不同的进化过程，或适应地或非适应地，塑造了如今SSB在不同谱系中的延续和表现，但对其起源的解释，是不必要的。诚然，当我们检视在一个演化支中如此普遍的特定特性时，一个合理的假说就是这样的进化模式很可能缘起于这一进化支的起源；然而，就我们所知，这样的假说或许并不适用于SSB的进化。最简单的假说未必正确，SSB源于一个单一进化源，这样的假说无疑是SSB研究中被忽视的考量。 更进一步，我们讨论了此种假定远古群落的性行为包括DSB和SSB两者的假说，将会如何重塑科学家对现存分类层级中SSB的认知。借此，我们致力于重新定义SSB研究中的零假设——简单来说，我们提出了一种从 “为什么有SSB？” 到 “为什么不呢？” 的视角转移。在我们共有的零假设模型内，在性行为研究的不同方面中，这样的视角转移已被多次主张（例如，配偶选择中的任意特性选择（arbitrary trait choice in mate selection）及雌性配偶选择的存在本身（the existence of female mate choice）、领地意识（territoriality）、雌性多次交配（female multiple mating）），并促使这些领域的实证研究发生变革。我们坚称，这样的视角转移，这样对什么是性行为基本情况的看法的转移将激励SSB研究领域内新假说和新方法的诞生——无论我们的预测是否正确，这些新假说和新方法都将帮助我们更好地理解动物性行为的多样性。 方框1：术语和声明我们意识到，在讨论各种动物的性行为的同时，维持一种对人类生理性别（sex；此翻译参照此处，下同。——译者注）、性向（sexuality）和社会性别（gender）的包容性视角，是相当复杂的。考虑到这点，我们努力在不排除重要的人类语境的同时，将人类性向和其他动物的性行为区分开。为避免不恰当的拟人，我们在人类社会性别和性向，与科学上的性别和性行为术语间划下了清晰边界：前者是基于个人特质、吸引力，以及性偏好和浪漫关系偏好的自我认知，后者则用于指称在非人类动物（见方框2；同有译文，见下）中发现的特定属性和特质。因此，除非用于引用，我们特意避免在手稿中使用如“异性的（hetrosexual）”和“同性的（homosexual）”一类的名词。作为替代，我们诉诸于术语相同性别的性行为（same-sex sexual behaviour，SSB）和不同性别的性行为（different-sex sexual behaviour，DSB），它们更加精确地描述了有关性互动的发现。 特别地，考虑到为涉及超过两个个体的性行为分类将会相当困难，我们使用术语SSB、DSB指代个体间离散的性互动。当考虑一个个体的完整生命周期、或一个种群中的多个个体时，由个体或群体表现的SSB - DSB程度成为了一个连续谱式的——而非二元式的——特性（图2a；不译）：注意到SSB和DSB并不是相互排斥的行为是重要的；还要清楚，DSB之广泛性并不能在任何意义上预测SSB广泛与否，反之亦然：表现出SSB的动物有时可能会表现更多的DSB，高于通常假定的程度。我们使用术语 排他的DSB（个体水平：一个个体的所有性行为都是DSB；群体水平：一个群体中的所有个体仅参与DSB）和 排他的SSB（个体水平：一个个体的所有性行为都是SSB；群体水平：一个群体中的所有个体仅参与SSB）来描述该性行为连续谱两端的理论极端情况。 人类性行为的文化构造影响了有关SSB演化的假说，特别是对于社会性脊椎动物和其它灵长类动物而言。大量有关SSB演化的解释使用人类——而不是其它物种——作为研究系统，这导致一些概念明显源于人类的社会-政治话语。例如，所谓“监狱效应（prison effect）”，声称个体在被剥夺了与不同性别的个体交配的机会后会参与SSB，就是出自单一性别场合，比如监狱，会鼓励囚犯之间的“情境性同性恋（situational homosexuality）”这一流行观点。我们注意到准确且道德地衡量人类性行为臭名昭著地困难，这使得很难控制变量；而监狱通常的强制性意味则更加剧了这些问题。源自历史，这种对人类性行为的聚焦通常使得演化生物学家仅仅通过一个单一端点（个人将“单一端点”理解为“人类”。——译者注）的社会语境来理解一种动物界广泛存在的行为。 由于无法避免的职责偏见将影响所有领域的研究者塑造他们观点的方式，我们希望读者明认：即便作者们性别、性向和子学科方向各异多样，我们均是顺性别的生物学家，且主要在欧美文化语境和科学传统中接受教育。我们的目标是：我们在此呈现的观点能引领一场对动物性行为之多样性、功能和演化的深刻审慎的讨论，这样的讨论定要包容人们多样的生理性别、心理性别和性向。 图1 表1 本表中存疑的“通称”译名将在括号中给出原文。 震惊的地方要来了！！兴奋地搓手手（大雾（（光速逃（（（ 表1 | 由横跨动物系统发生树（phylogeny）的各类多样的物种（与图1对应）表现的SSBs，以及详细记录这些行为的引用（译文中省去） 图示 通称 物种名称 行为描述 1a 绿海胆 Lytechinus variegatus 这些海胆是扩散型产卵生物（broadcast spawner），通常在释放配子前聚集在一起。这样的聚集反映了群体中的性别分布：没有证据表明海胆可以区分潜在伴侣的性别。 1b 小笠原狐蝠 Pteropus pselaphon 在野外，雄性狐蝠在仅有男性的社交种群中舔同性的生殖器——勃起的阴茎。 1c 拖鞋贝壳（Common slipper shell） Crepidula fornicata 拖鞋贝壳是序贯雌雄同体生物：先作为雄性性成熟，随后过渡到雌性。较小、较易活动的雄性会与更大的个体聚集，永久交往和交配。当可以选择时，一小部分的雄性选择与其他雄性交往。 1d 美洲大赤鱿 Dosidicus gigas 观察到雄性在其外套膜（mantle）上有可见的精子囊，表明该个体与另一雄性交配；精子囊与通常沉积在雌性体内的位置相同，数量相似。 1e 束带蛇、园丁蛇（Garter snake） Thamnophis sirtalis 该物种的交配通常发生在大量雄性聚成球形，试图与一条单条的、处于中心的🐍交配，大多是雌性，但有时也有雄性🐍释放与雌性相似的信息素。 1f 雪雁 Anser caerulescens 有报告称目击雄性-雄性配对和雌性-雌性配对，共同抚养两个个体的后代。 1g 豆娘 Ischnura elegans 在该物种中，模仿雄性颜色模式的雄形（andromorphic）雌性在某些情况下会很常见。雄性经常与其他雄性交往并配对，尤其是当存在许多雄形雌性时。 1h 黑背信天翁 Phoebastria immutabilis 在瓦胡岛（Oahu）上的一个黑背信天翁种群中，成对抚养后代的配对中有近三分之一是雌性-雌性配对。参与这种配对的雌性能每年繁殖后代。 1i 赤拟谷盗 Tribolium castaneum 雄性经常与其他雄性配对，并试图与其交配。观察到包括释放精子在内的雌-雄交配行为的发生。 1j 田蟋 Teleogryllus oceanicus 雌性蟋蟀经常相互求爱，包括求爱鸣叫，求爱姿势以及坐骑。 1k 家牛 Bos taurus 当部分或所有雌性处于发情期时，混合性别的牛群中的个体有时会聚集成纯雌性的亚群体。在这些亚群体中，雌性间会表现与公牛交配时相同的求偶行为，包括舔生殖器，摩擦下巴和坐骑。 1l 海星 Archaster angulatus 虽然海星是扩散型产卵生物，但此物种中的雌性确实会在释放配子之前与雌性配对，配对会保持原位长达24小时。在野生条件下，雄性-雄性配对并不罕见。 1m 日本猕猴 Macaca fuscata 雌性猕猴间会规律性地配对并形成暂时但排他的关系。在此期间，它们会进行以骨盆抽动结束的同性间坐骑。雌性将与雄性竞争获得其它雌性的机会，有时会优先与雌性配对，而非与仍未配对的雄性。 1n 南极企鹅 Pygoscelis antarcticus 著名的中央公园动物园（Central Park Zoom）的两只圈养的南极企鹅形成了配对，并试图孵化一个卵。 当从另一个巢获得可育卵后，它们成功共同抚养了一只小🐧。在有进化关联的巴布亚🐧和阿德利🐧中，同性配对也很常见。 1o 大蟾蜍 Bufo bufo 抱合（amplexus）时，雄性蟾蜍不会区分性别、接受性或物种。抓住后，被其他雄性坐骑的雄性会使用特定的信息素以使自身被释放。 1p 大鼠肠道蛔虫（Rat gastrointestinal roundworms） Nippostrongylus brasiliensis 蛔虫太恶心了，最讨厌这些东西了。不译=_= 1q 裂唇鱼 Labroides dimidiatus 该物种是序贯雌雄同体生物，先以雌性性成熟，在没有常驻雄性的情况下，最大的雌性会转变为雄性。然而，这些雌性会开始与其他雌性一起产卵，并在生殖转变完成前就承担起“雄性”的求爱角色和行为。此行为发生在移除雄性约一小时后。 1r 箱蟹 Calappa sp. 观察到雄蟹间相互交配的时长超过连续的18天。 注意：本表格并未穷尽表现出SSB的物种。 一个关于性行为演化的新模型我们提出，无区别性行为，或不含基于性别的配偶选择的性行为，将导致SSB和DSB两者，这最可能是有性生殖生物的祖先的情形。我们推断，现有模型中假定的彻底靶向的DSB，更可能是一种衍生特性：这一特性出现在一个异配生殖（anisogamous）、多细胞、无行动能力的远古物种进化出性行为之后。总的来说，考虑到排他的DSB要求配偶鉴别（分子层面的受精相容性以外的机制），逻辑上，它仅可能在可察的多样化性征（比方说，身体大小和形状，颜色，化学和听觉信号，等等）进化出来之后发生。支持这些基本原则的证据来自棘皮动物——一个与脊椎动物有关的分支谱系，它具有可能类似于祖先生物的特征，而性行为正是演化自这些特征（方框2）；此外，这类动物已被发现既表现SSB，又表现DSB。 更进一步，我们提出生态学或社会学语境下的自然选择，仅会在SSB的代价高昂得无法承受时才会对抗之。若一些特定谱系缺乏这样的代价，SSB可能延续，因为生殖适应度最大值的出现，似乎要求特别靶向受精相容的伴侣（DSB）这一代价，和更多的交配机会（SSB）这一收益之间的平衡。因此，不同程度地横跨个体的生命周期，不同程度地涉及群体中的各个个体，DSB、SSB的双重表达，或许才是大多数动物物种的常态（norm）。这代表了在远古环境下无差别性行为依然保持或中性，或——在一些情况下——有益的这一遗产。 SSB的代价和收益我们的假说缘起于对性行为代价和收益的相对考量。对于SSB，大部分研究的隐含假设是SSB代价高昂，激发了对同样大的益处的探寻，以为高代价的SSB的存在辩护。在解释SSB于一些特定演化支——特别是一些具有复杂社会系统的物种，比如灵长类，在这样的物种中SSB的潜在益处较易鉴别——内的普遍性时，为解释SSB的进化提出的与适应度有关的假说或许确实有一定价值。然而，当我们特别考虑祖先物种是无差别性行为这一可能性时，SSB的延续并不需要很高的益处来维持。相反，我们认为SSB的代价在很多情况下能够达到最小，特别是在一些特定物种中：这些物种相较于生殖产出，其个体具有较高的交配频率。因此，SSB的普遍性和延续性可以在很大程度上由祖先起源，和自然选择的较弱对抗来解释：自然选择不会同这样一种适应代价远低于其它影响繁殖成功率的因素（如不孕不育和配偶竞争）的特性作对。 SSB的潜在性低代价这一认识，在大量研究异种性行为——不同物种间的性行为——的详尽文本中可见一斑。尽管确实有实例，表明了异种性行为的高代价（被冠以名词 “生殖干扰（reproductive interference）”），新近研究同样表明在一些分类层级中，异种性行为能够延续，因为其代价低于减少交配的成本和构建用于识别同物种配偶的额外机制的成本。例如，一项近期研究发现，当将密切关联的南瓜虫（squash bug）物种放在一起时，异种交配相当普遍，但参与该行为的个体与同种个体的交配率也很高，并且和不允许与同种个体交配的个体具有相似的孵化成功率。与之类似，对于那些不在个体的单次交配尝试上下过高赌注的物种，SSB也会具有较低的代价。 DSB的代价和收益一些假说，不论与适应有没有关系，在解释SSB的演化时，通常都基于一个隐含的前提：远古时的情形是一个排他DSB的群体，遭受了编码有SSB的等位基因的入侵；前后比较，较少的DSB与适应度降低紧密相连。这样的假定同样体现在描述性行为的少数模型中：这些模型假设DSB，特别是“紧盯雌性”的雄性，会快速进化，因为远古时期的扩散型产卵所导致的高交配后精子竞争（方框2），会带来很大的选择压（selection pressure）。这些模型假设正因DSB是生殖所必需的，自然选择会高度青睐高水平的DSB；不仅如此，它们还假设盯雌性盯得更紧的雄性——意味着更高水平的DSB，会提升繁殖成功率。 然而，事实通常并非如此——诸如配偶竞争、交配顺序、交配年龄、配子质量、精子浓度以及由雌性主导的交配后选择对DSB能否最终引向后代的诞生起着关键作用。更进一步，在许多动物物种中，DSB并不仅仅服务于一些独特场合下的受精，它可能还有着多种非生殖的功能：这表明“过度的”性行为并不会显著降低适应度。相反，不断增加的配偶甄别和性别特定的性行为是有代价的：错失的交配机会，以及行为学和形态学上的第二性征的建构（不同性别的个体籍此确信配偶确实是不同性别）。例如，当雄性埋葬虫（burying beetle）注意到错失与雌性交配的次数上升时，会更多地参与SSB；这表明在交配机会稀缺的情形下，排他DSB可以是不利的。 综上所述，我们认为：尽管DSB的增多能够最大化受精的可能性，并且，由此推断，能使适应度在一些——或许是广泛——条件下达到最大，并不说明更多的DSB是引向更高适应度的唯一可行措施。排他DSB，与其说是表现了有性生殖动物的基本策略，不如说是代表了一种必须在第二性征发育完全之后才能出现的次生特性，而且这种特性仅在一些特殊语境下才是适应性的。 移动基线时至今日，演化生物学家总在问SSB为什么能够进化，SSB为什么能够延续，而不管其明显代价。通过质疑SSB的“明显代价”终究是不是如此明显，我们反对这种观点。我们要问的是，构建代价高昂的配偶识别系统并通过高选择率潜在地限制交配机会，是否，以及何时，能够进化，尽管性行为的通吃策略能有足够高的受精机率和足够低的代价。这正是我们论点的关键：任何为解释动物SSB的“目的”而提出的与适应有关无关的假说，或许能很好地解释其延续性，包括SSB附带的非生殖功能；但是，SSB并不缘起于产生这些功能的较近的演化事件，而是源于性行为的最早形式。 这种看似微妙的区分基于一关键概念：正在经历演化变化的一个群体，其初始条件对其演化轨迹，有着关键的，甚至是方向性的影响。演化轨迹的预期代价、收益和可能性之间的差异，依赖于我们是否假定自然选择会青睐某种初始时罕见的特性，或者抵抗某种初始时常见的特性。因此，通过移动有关这些性行为起源的假设，我们的假说极大地改变了选择性机制，如今在动物中见到的性行为的多样性正是由此而生。 我们的理论与此先指出研究狭隘地聚焦于适应性进化的批评一致。这样的对于适应的关注，会导致一种倾向：即将现存特质解释为在较强自然选择下，近期演化变化的表征；而不是出自较弱或缺乏选择、不断浮动的选择压和生物学限制的特性。在基于一种SSB主要是中性的假说，在不同的演化支和生态学语境下，青睐DSB、抵抗SSB的选择或许很强，抵抗SSB的选择或许可忽略，在一些情况下青睐高度或特定类别SSB的选择或许很强。事实上，早先曾有研究提出，SSB最早是作为非人类灵长类动物的中性变异出现的，随后各种新兴的群体性行为带来的益处增强了对该特性的定向选择。我们外延这一假说，提出配偶行为的这一变异，是所有有性生殖、雌雄异体动物的祖先。因而，我们预测，动物性行为令人震惊的多样性，是多种程度的适应性或非适应性过程（包括基因漂变）对当下个体、种群和物种的DSB - SSB连续谱持续性选择的结果。 方框2：定义与性生殖有关的性行为动物内和动物间繁殖模式和系统令人惊讶的多样性，提示了准确定义性行为会令人沮丧地困难。总的来说，由于人类更容易辨认出和我们具有相似性行为方式的物种的性行为，我们注意到观察者偏差在动物性行为的鉴别、描述和理解中广泛存在（方框1）。因此，我们尝试建立对动物性行为的有效定义，以及性和性生殖的概念：这些定义既要能反映自然变异，又要能表明大多数生物特征是如何连续变化的。 我们使用广义的动物性行为定义：任何可能对成功繁殖有贡献的行为；这些行为——不论在何种情况下观察到它们——可能出现在交配时、求爱中或配对间。成功的繁殖要求通过性生殖达成后代的诞生：形成后代的遗传物质的组合，通常源自大小不同的配子的融合（异配生殖）。因此，特别是对个体仅产生一种类型配子的雌雄异体系统，性这一概念定义于它们产生的配子类型：雌性（典型地，带有较大细胞质的配子（卵子））、雄性（更小的，主要是DNA的配子（精子））。要注意到，这些定义无法充分描述不产生配子的生殖行为，此外，在多个分类层级中，对性别的可行定义通常依赖于更加明显的第二性征。意识到这些局限，围绕本文之主旨，我们将我们对性的理解建构于其基因解释之上，以期广泛理解针对“相同性别”个体和“不同性别”个体的性行为。 借上述定义，性行为必须要等到性生殖出现以后才能进化出来。然而，研究性行为的理论工作令人惊讶地罕见。一个值得注意的例外是帕克（Parker）的模型，这一模型假定运动能力、行为复杂性、交配和内部受精（这一进程包括性行为）是进化自一个异配生殖的、多细胞的、无运动能力的物种。在本文中，我们认为现存动物的、有性行为的最近共同祖先，源自一个相似的进化起源。然而，这并未排除性行为具有多个起源这一可能，亦未断言非异配生殖、非多细胞的生物就没有性行为。重点在于，往下走，我们偏离了帕克模型的逻辑：帕克模型特别假设这一转变必定导致对雄性“紧盯雌性”的性行为的强选择；我们则进一步认为，这些模型反应了一个主流的隐含假设，即性行为仅针对不同性别的个体而演化：这正是我们的假说要质疑的。 [以下对应原文中 “Implications for studing SSB” 段落，包括三级子标题 “Phylogenetic comparisons” 和 “Ecology and natural history of SSB”，不译；此外还有 图2（“ Conceptual representation of the variation in SSB and DSB that is possible at the individual and population, and species levels.”）、图3（“Ecological, evolutionary and developmental factors may influence the expression of SSB.”），均不译] [除上述提及的段落，原文中其它所有文字均有译文] 结束语如果任何一种特性能够出现在如此广泛多样的分类层级中，这一特性是源于最早的动物演化支的远古情形这一点，很可能早就取得了广泛认同——只要该特性不是SSB。视SSB为一种在如此之多不同的谱系中独立趋同进化的观点，只会使得视异性恋为基准的世界性思潮更加根深蒂固：在这样的世界中，“异性的”性行为被定格为有性生殖生物的“自然情况”，而“同性的”则被视为一种必须解释其存在并为其正名的反常情况。因此，横跨演化生物学界的欧美文化规范——视异性恋为基准的、父系的——的持续延续已经影响了有关性行为的讨论，它使得这些讨论主要集中于DSB：一种单一的、被认为文化上可接受的性行为（方框1）。 质疑这些偏见，为有关性行为进化的更简单假说（奥卡姆剃刀。——译者注）创造了空间。随着有关各种物种性行为如何演化的研究不断推进，我们断言，相较于仅表现DSB（排他DSB）的物种，同时表现SSB和DSB的物种更加普遍——前者可能才是自然界中的罕见情况。自然选择不同程度地青睐或对抗DSB和SSB，围绕这一点的各种问题为演化生物学提供了令人兴奋的机遇。由于这一领域相关研究的贫乏，当下任何对我们假说的外延都是可疑的；但是，放松施加在有关性行为的演化理论上的传统限制，无疑会激起对这些行为在动物生态学和动物进化语境下具有如何多样的角色更加广阔、更加彻底的探讨——我们对此感到兴奋。视SSB为一种源于“异性的”、独立进化的、近期才出现的现象，而非各种复杂难解的行为、特质和策略光谱被我们不负责任地归为“性”和“性行为”中的一个受害者，无疑是一种二元本质论的表征——这种论调不仅妨碍社会解放和自由，还会妨碍科学发现。 接收于：2019年6月5日；接受于：2019年9月30日在线发表于：2019年11月18日 全文完。翻译：Ray Eldath。 译注：注意，本文并不是所谓的「original research article」，即「原创研究论文」，而仅仅是一篇review性质的“Perspective”——这点从本文较短的长度中就可以看出来，详细的举例和论证应该引文中。为方便，本文翻译时去除了所有的引用注记，这可能使本译文显得缺乏证据。 需要强调的是，作为一篇「观点（Perspective）」文章，本文的最大意义和最终目的，并不在于足够充分、足够彻底地举证以证明文中提出的新假说；而是在于通过提出当下该领域研究的很多理所应当的假设，事实上是未经检验的，来激起对「另一种可能」的探讨。文章的目的在于使人们注意到这样的另一种可能，并期望后续更深刻、彻底的研究能对这种可能性进行实证的——无论是支持还是反对——证据搜集和论证。正如作者们说的： 更进一步，我们讨论了此种假定远古群落的性行为包括DSB和SSB两者的假说，将会如何重塑科学家对现存分类层级中SSB的认知。借此，我们致力于重新定义SSB研究中的零假设——简单来说，我们提出了一种从 “为什么有SSB？” 到 “为什么不呢？” 的视角转移。 …… 我们坚称，这样的视角转移，这样对什么是性行为基本情况的看法的转移将激励SSB研究领域内新假说和新方法的诞生——无论我们的预测是否正确，这些新假说和新方法都将帮助我们更好地理解动物性行为的多样性。…… 我们的目标是：我们在此呈现的观点能引领一场对动物性行为之多样性、功能和演化的深刻审慎的讨论，这样的讨论定要包容人们多样的生理性别、心理性别和性向。 校对的时候发现好几个DSB给打成DSL（领域特定语言）了。。太搞笑了，😅😅 居然差不多一万字了。。。。惊了，如果翻译也算是我的东西的话，那连续两篇文章破记录，本身也算是“破纪录”了吧？哈哈。 总之就是这样，祈愿本学期能不挂科吧。 最后来看一下论文文末的“致谢（Acknowledgements）”： This project could not have come to fruition without many dynamic and thought-provoking conversations with natural and social scientists, feminists, LGBTQIA+ activists, friends and family members. We particularly thank A. Wesner and the members of the Queer Ecologies Working Group within the Social Science Matrix at UC Berkeley, who facilitated a workshop and…… 我就知道。","link":"/science/monk2019/"}],"tags":[{"name":"阿尔贝·加缪","slug":"阿尔贝·加缪","link":"/tags/%E9%98%BF%E5%B0%94%E8%B4%9D%C2%B7%E5%8A%A0%E7%BC%AA/"},{"name":"文学","slug":"文学","link":"/tags/%E6%96%87%E5%AD%A6/"},{"name":"矫情","slug":"矫情","link":"/tags/%E7%9F%AB%E6%83%85/"},{"name":"没什么用的回忆","slug":"没什么用的回忆","link":"/tags/%E6%B2%A1%E4%BB%80%E4%B9%88%E7%94%A8%E7%9A%84%E5%9B%9E%E5%BF%86/"},{"name":"科幻","slug":"科幻","link":"/tags/%E7%A7%91%E5%B9%BB/"},{"name":"爵士鼓","slug":"爵士鼓","link":"/tags/%E7%88%B5%E5%A3%AB%E9%BC%93/"},{"name":"架子鼓","slug":"架子鼓","link":"/tags/%E6%9E%B6%E5%AD%90%E9%BC%93/"},{"name":"音乐","slug":"音乐","link":"/tags/%E9%9F%B3%E4%B9%90/"},{"name":"硬件编程","slug":"硬件编程","link":"/tags/%E7%A1%AC%E4%BB%B6%E7%BC%96%E7%A8%8B/"},{"name":"SystemVerilog","slug":"SystemVerilog","link":"/tags/SystemVerilog/"},{"name":"FPGA","slug":"FPGA","link":"/tags/FPGA/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"翻译","slug":"翻译","link":"/tags/%E7%BF%BB%E8%AF%91/"},{"name":"病毒学","slug":"病毒学","link":"/tags/%E7%97%85%E6%AF%92%E5%AD%A6/"},{"name":"生物学","slug":"生物学","link":"/tags/%E7%94%9F%E7%89%A9%E5%AD%A6/"},{"name":"不务正业","slug":"不务正业","link":"/tags/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A/"},{"name":"程序设计范式（paradigm）","slug":"程序设计范式（paradigm）","link":"/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%EF%BC%88paradigm%EF%BC%89/"},{"name":"程序设计语言","slug":"程序设计语言","link":"/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/"},{"name":"Rust","slug":"Rust","link":"/tags/Rust/"},{"name":"演化生物学","slug":"演化生物学","link":"/tags/%E6%BC%94%E5%8C%96%E7%94%9F%E7%89%A9%E5%AD%A6/"}],"categories":[{"name":"literature","slug":"literature","link":"/categories/literature/"},{"name":"life","slug":"life","link":"/categories/life/"},{"name":"misc","slug":"misc","link":"/categories/misc/"},{"name":"music","slug":"music","link":"/categories/music/"},{"name":"hardware","slug":"hardware","link":"/categories/hardware/"},{"name":"science","slug":"science","link":"/categories/science/"},{"name":"programming","slug":"programming","link":"/categories/programming/"}]}